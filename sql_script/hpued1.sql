/*
Navicat MySQL Data Transfer

Source Server         : 前端官网环境
Source Server Version : 50627
Source Host           : 10.48.193.201:3306
Source Database       : hpued

Target Server Type    : MYSQL
Target Server Version : 50627
File Encoding         : 65001

Date: 2015-12-17 17:28:15
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `account`
-- ----------------------------
DROP TABLE IF EXISTS `account`;
CREATE TABLE `account` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `userName` varchar(255) DEFAULT NULL COMMENT '登录用户名',
  `password` varchar(255) DEFAULT NULL COMMENT '用户密码',
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_username` (`userName`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8 COMMENT='帐户登录表';

-- ----------------------------
-- Records of account
-- ----------------------------
INSERT INTO `account` VALUES ('1', 'admin', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('2', 'yongwang', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('3', 'hbzheng', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('4', 'huanliu', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('5', '黑豹', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('6', '花儿', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('7', '蝴蝶', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('8', '甄嬛', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('9', '芈月传', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('10', '那英', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('11', '周董', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('12', '华仔', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('13', 'cctv', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('14', '大白', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('15', 'twen', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('16', 'wliu', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('17', 'xhtian', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('18', 'yji', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('19', 'yuefengjiang', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('20', 'canzhang', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('21', 'dyzeng', 'e10adc3949ba59abbe56e057f20f883e');
INSERT INTO `account` VALUES ('22', 'qizhang', 'e10adc3949ba59abbe56e057f20f883e');

-- ----------------------------
-- Table structure for `article`
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) DEFAULT NULL COMMENT '文章标题',
  `articleCode` varchar(40) DEFAULT NULL COMMENT '文章代码',
  `articleName` varchar(100) DEFAULT NULL COMMENT '文章名称',
  `articlePic` varchar(100) DEFAULT NULL,
  `author` varchar(20) DEFAULT NULL COMMENT '文章作者',
  `content` text COMMENT '文章内容',
  `createTime` datetime DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime DEFAULT NULL COMMENT '更新时间',
  `status` int(11) DEFAULT NULL COMMENT '文章状态   0为待审核  1为可用  2为不可用',
  `categoryName` varchar(20) DEFAULT NULL COMMENT '文章名称',
  `categoryCode` varchar(10) DEFAULT NULL COMMENT '文章代码',
  `desc` text,
  `isDelete` int(11) DEFAULT '0' COMMENT '是否删除标志   0为未删除  1为已删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('1', '如何高效输出移动app产品原型', 'article_1446091540245', '如何高效输出移动app产品原型', '/upload/article/1446091540245.jpg', 'admin', '如何高效输出移动app产品原型？ 清晰的产品思路，顺畅的协同合作，齐备的素材元素，真实的体验感受…保证过程的高效，更要保证有效的成果。下面我们将分三步走，来完成高效输出移动app产品原型。\r\n\r\n一、输出以界面为单位的产品流程图\r\n\r\n高效输出，首先要保证产品的整体思路要正确，这点可以从产品流程图中体现出来。移动产品需要做到聚焦，因为手机界面的大小，用户的碎片化使用等等，所以一个界面上必然不可能出现太多的内容和行动点，这就保证了我们可以用最简洁的方式来画流程。以界面为单位，定义 “界面标题”和“主要内容”，如下图所示：\r\n\r\n![](http://ued.taobao.org/blog/wp-content/uploads/2014/05/gbz01.png)\r\n\r\n如何利用起这样的界面单位来画流程，下面以一个app的登录注册为例：\r\n\r\n![](http://ued.taobao.org/blog/wp-content/uploads/2014/05/gbz02.png)\r\n\r\n这样的一个产品流程图，可以快速了解产品有多少界面，检验用户路径是否太长，形式简单，也方便讨论修改。\r\n\r\n二、使用可修改的基础原型控件\r\n\r\n如何快速产出高保真原型？一套备用的基础原型组控件必不可少。大部分设计师一般使用axure来完成产品原型，所以从协同合作的角度，本文专门在axure里制作了整套最常用的移动产品组控件。设计师只要改文字，改颜色，摆位置就可以完成简单的高保真原型。 基础组控件截图如下：（下载地址1）（下载地址2）\r\n\r\n![](http://ued.taobao.org/blog/wp-content/uploads/2014/05/gbz03.png)\r\n\r\n以此控件为基础，在之前提到的app登录注册例子，快速组件高保真原型，如下图:\r\n\r\n![](http://ued.taobao.org/blog/wp-content/uploads/2014/05/gbz04.png)\r\n\r\n关于设计上很多细节，大家可以参看书籍【方寸指间——移动设计实战手册】，里面涉及到很多最基本的移动设计知识。\r\n\r\n三、制作可点击的动态原型\r\n\r\n完成高保真原型，根据流程图，可以很方便制作出在手机上可体验的动态效果，让产品人员或则用户真实感受app实际的效果。这里推荐一个特别简单的方法，登录www.flinto.com，完成注册，将高保真原型以图片的方式倒入，通过链接和转场方式选择，就可以很方便在手机上查看。网站提供了比较具体的指导，大家可以直接查看。\r\n\r\n![](http://ued.taobao.org/blog/wp-content/uploads/2014/05/gbz06.png)', '2015-10-29 12:05:40', '2015-11-03 16:38:45', '1', '性能优化', 'xnyh', null, '0');
INSERT INTO `article` VALUES ('2', 'Node.js Web应用代码热更新的另类思路', 'article_1446096847515', 'Node.js Web应用代码热更新的另类思路', '/upload/article/1446096847515.jpg', 'admin', '## 背景\r\n\r\n相信使用 Node.js 开发过 Web 应用的同学一定苦恼过新修改的代码必须要重启 Node.js 进程后才能更新的问题。习惯使用 PHP 开发的同学更会非常的不适用，大呼果然还是我大PHP才是世界上最好的编程语言。手动重启进程不仅仅是非常恼人的重复劳动，当应用规模稍大以后，启动时间也逐渐开始不容忽视。\r\n\r\n当然作为程序猿，无论使用哪种语言，都不会让这样的事情折磨自己。解决这类问题最直接和普适的手段就是监听文件修改并重启进程。这个方法也已经有很多成熟的解决方案提供了，比如已经被弃坑的 node-supervisor，以及现在比较火的 PM2 ，或者比较轻量级的 node-dev 等等均是这样的思路。\r\n\r\n本文则提供了另外一种思路，只需要很小的改造，就可以实现真正的0重启热更新代码，解决 Node.js 开发 Web 应用时恼人的代码更新问题。\r\n\r\n## 总体思路\r\n\r\n说起代码热更新，当下最有名的当属 Erlang 语言的热更新功能，这门语言的特色在于高并发和分布式编程，主要的应用场景则是类似证券交易、游戏服务端等领域。这些场景都或多或少要求服务拥有在运行中运维的手段，而代码热更新就是其中非常重要的一环，因此我们可以先简单的了解一下 Erlang 的做法。\r\n\r\n由于我也没有使用过 Erlang ，以下内容均为道听途说，如果希望深入和准确的了解 Erlang 的代码热更新实现，最好还是查阅官方文档。\r\n\r\n- Erlang 的代码加载由一个名为code_server的模块管理，除了启动时的一些必要代码外，大部分的代码均是由code_server加载。\r\n- 当code_server发现模块代码被更新后，会重新加载模块，此后的新请求会使用新模块执行，而原有还在执行的请求则继续使用老模块执行。\r\n- 老模块会在新模块加载后，被打上old标签，新模块则是current标签。当下一次热更新的时候，Erlang 会扫描还在执行老模块的进行并杀掉，再继续按照这个逻辑更新模块。\r\n- Erlang 中并非所有代码均允许热更新，如 kernel, stdlib, compiler 等基础模块默认是不允许更新的\r\n我们可以发现 Node.js 中也有与code_server类似的模块，即 require 体系，因此 Erlang 的做法应该也可以在 Node.js 上做一些尝试。通过了解 Erlang 的做法，我们可以大概的总结出在 Node.js 中解决代码热更新的关键问题点\r\n\r\n- 如何更新模块代码\r\n- 如何使用新模块处理请求\r\n- 如何释放老模块的资源\r\n那么接下来我们就逐个的解析这些问题点。\r\n\r\n## 如何更新模块代码\r\n\r\n要解决模块代码更新的问题，我们就需要去阅读 Node.js 的模块管理器实现，直接上链接 module.js。通过简单的阅读，我们可以发现核心的代码就在于 Module._load ，稍微精简一下代码贴出来。\r\n```javascript\r\n// Check the cache for the requested file.\r\n// 1. If a module already exists in the cache: return its exports object.\r\n// 2. If the module is native: call `NativeModule.require()` with the\r\n//    filename and return the result.\r\n// 3. Otherwise, create a new module for the file and save it to the cache.\r\n//    Then have it load  the file contents before returning its exports\r\n//    object.\r\nModule._load = function(request, parent, isMain) {\r\n  var filename = Module._resolveFilename(request, parent);\r\n\r\n  var cachedModule = Module._cache[filename];\r\n  if (cachedModule) {\r\n    return cachedModule.exports;\r\n  }\r\n\r\n  var module = new Module(filename, parent);\r\n  Module._cache[filename] = module;\r\n  module.load(filename);\r\n\r\n  return module.exports;\r\n};\r\n\r\nrequire.cache = Module._cache;\r\n```\r\n\r\n可以发现其中的核心就是 Module._cache ，只要清除了这个模块缓存，下一次 require 的时候，模块管理器就会重新加载最新的代码了。\r\n\r\n写一个小程序验证一下\r\n```javascript\r\n// main.js\r\nfunction cleanCache (module) {\r\n    var path = require.resolve(module);\r\n    require.cache[path] = null;\r\n}\r\n\r\nsetInterval(function () {\r\n    cleanCache(\'./code.js\');\r\n    var code = require(\'./code.js\');\r\n    console.log(code);\r\n}, 5000);\r\n```\r\n```javascript\r\n// code.js\r\nmodule.exports = \'hello world\';\r\n```\r\n我们执行一下 main.js ，同时取修改 code.js 的内容，就可以发现控制台中，我们代码成功的更新为了最新的代码。\r\n\r\n![](http://bos.nj.bpc.baidu.com/v1/agroup/07a62b80376c32fc50100976e1e045dc141aa54b)\r\n\r\n那么模块管理器更新代码的问题已经解决了，接下来再看看在 Web 应用中，我们如何让新的模块可以被实际执行。\r\n\r\n## 如何使用新模块处理请求\r\n\r\n为了更符合大家的使用习惯，我们就直接以 Express 为例来展开这个问题，实际上使用类似的思路，绝大部分 Web应用 均可适用。\r\n\r\n首先，如果我们的服务是像 Express 的 DEMO 一样所有的代码均在同一模块内的话，我们是无法针对模块进行热加载的\r\n\r\n```javascript\r\nvar express = require(\'express\');\r\nvar app = express();\r\n\r\napp.get(\'/\', function(req, res){\r\n  res.send(\'hello world\');\r\n});\r\n\r\napp.listen(3000);\r\n```\r\n要实现热加载，和 Erlang 中不允许的基础库一样，我们需要一些无法进行热更新的基础代码控制更新流程。而且类似 app.listen 这类操作如果重新执行了，那么和重启 Node.js 进程也没太大的区别了。因此我们需要一些巧妙的代码将频繁更新的业务代码与不频繁更新的基础代码隔离开。\r\n```javascript\r\n// app.js 基础代码\r\nvar express = require(\'express\');\r\nvar app = express();\r\nvar router = require(\'./router.js\');\r\n\r\napp.use(router);\r\n\r\napp.listen(3000);\r\n// router.js 业务代码\r\nvar express = require(\'express\');\r\nvar router = express .Router();\r\n\r\n// 此处加载的中间件也可以自动更新\r\nrouter.use(express.static(\'public\'));\r\n\r\nrouter.get(\'/\', function(req, res){\r\n  res.send(\'hello world\');\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\n然而很遗憾，经过这样处理之后，虽然成功的分离了核心代码， router.js 依然无法进行热更新。首先，由于缺乏对更新的触发机制，服务无法知道应该何时去更新模块。其次， app.use 操作会一直保存老的 router.js 模块，因此即使模块被更新了，请求依然会使用老模块处理而非新模块。\r\n\r\n那么继续改进一下，我们需要对 app.js 稍作调整，启动文件监听作为触发机制，并且通过闭包来解决 app.use 的缓存问题\r\n```javascript\r\n// app.js\r\nvar express = require(\'express\');\r\nvar fs = require(\'fs\');\r\nvar app = express();\r\n\r\nvar router = require(\'./router.js\');\r\n\r\napp.use(function (req, res, next) {\r\n    // 利用闭包的特性获取最新的router对象，避免app.use缓存router对象\r\n    router(req, res, next);\r\n});\r\n\r\napp.listen(3000);\r\n\r\n// 监听文件修改重新加载代码\r\nfs.watch(require.resolve(\'./router.js\'), function () {\r\n    cleanCache(require.resolve(\'./router.js\'));\r\n    try {\r\n        router = require(\'./router.js\');\r\n    } catch (ex) {\r\n        console.error(\'module update failed\');\r\n    }\r\n});\r\n\r\nfunction cleanCache(modulePath) {\r\n    require.cache[modulePath] = null;\r\n}\r\n```\r\n再试着修改一下 router.js 就会发现我们的代码热更新已经初具雏形了，新的请求会使用最新的 router.js 代码。除了修改 router.js 的返回内容外，还可以试试看修改路由功能，也会如预期一样进行更新。\r\n\r\n当然，要实现一个完善的热更新方案需要更多结合自身方案做一些改进。首先，在中间件的使用上，我们可以在 app.use 处声明一些不需要热更新或者说每次更新不希望重复执行的中间件，而在 router.use 处则可以声明一些希望可以灵活修改的中间件。其次，文件监听不能仅监听路由文件，而是要监听所有需要热更新的文件。除了文件监听这种手段外，还可以结合编辑器的扩展功能，在保存时向 Node.js 进程发送信号或者访问一个特定的 URL 等方式来触发更新。\r\n\r\n## 如何释放老模块的资源\r\n\r\n要解释清楚老模块的资源如何释放的问题，实际上需要先了解 Node.js 的内存回收机制，本文中并不准备详加描述，解释 Node.js 的内存回收机制的文章和书籍很多，感兴趣的同学可以自行扩展阅读。简单的总结一下就是当一个对象没有被任何对象引用的时候，这个对象就会被标记为可回收，并会在下一次GC处理的时候释放内存。\r\n\r\n那么我们的课题就是，如何让老模块的代码更新后，确保没有对象保持了模块的引用。首先我们以 如何更新模块代码 一节中的代码为例，看看老模块资源不回收会出现什么问题。为了让结果更显著，我们修改一下\r\n```javascript\r\ncode.js\r\n\r\n// code.js\r\nvar array = [];\r\n\r\nfor (var i = 0; i < 10000; i++) {\r\n    array.push(\'mem_leak_when_require_cache_clean_test_item_\' + i);\r\n}\r\n\r\nmodule.exports = array;\r\n// app.js\r\nfunction cleanCache (module) {\r\n    var path = require.resolve(module);\r\n    require.cache[path] = null;\r\n}\r\n\r\nsetInterval(function () {\r\n    var code = require(\'./code.js\');\r\n    cleanCache(\'./code.js\');\r\n}, 10);\r\n```\r\n好~我们用了一个非常笨拙但是有效的方法，提高了 router.js 模块的内存占用，那么再次启动 main.js 后，就会发现内存出现显著的飙升，不到一会 Node.js 就提示 process out of memory。然而实际上从 app.js 与 router.js 的代码中观察的话，我们并没发现哪里保存了旧模块的引用。\r\n\r\n我们借助一些 profile 工具如 node-heapdump 就可以很快的定位到问题所在，在 module.js 中我们发现 Node.js 会自动为所有模块添加一个引用\r\n```javascript\r\nfunction Module(id, parent) {\r\n  this.id = id;\r\n  this.exports = {};\r\n  this.parent = parent;\r\n  if (parent && parent.children) {\r\n    parent.children.push(this);\r\n  }\r\n\r\n  this.filename = null;\r\n  this.loaded = false;\r\n  this.children = [];\r\n}\r\n```\r\n因此相应的，我们可以调整一下cleanCache函数，将这个引用在模块更新的时候一并去除。\r\n```javascript\r\n// app.js\r\nfunction cleanCache(modulePath) {\r\n    var module = require.cache[modulePath];\r\n    // remove reference in module.parent\r\n    if (module.parent) {\r\n        module.parent.children.splice(module.parent.children.indexOf(module), 1);\r\n    }\r\n    require.cache[modulePath] = null;\r\n}\r\n\r\nsetInterval(function () {\r\n    var code = require(\'./code.js\');\r\n    cleanCache(require.resolve(\'./code.js\'));\r\n}, 10); \r\n```\r\n再执行一下，这次好多了，内存只会有轻微的增长，说明老模块占用的资源已经正确的释放掉了。\r\n\r\n使用了新的 cleanCache 函数后，常规的使用就没有问题，然而并非就可以高枕无忧了。在 Node.js 中，除了 require 系统会添加引用外，通过 EventEmitter 进行事件监听也是大家常用的功能，并且 EventEmitter 有非常大的嫌疑会出现模块间的互相引用。那么 EventEmitter 能否正确的释放资源呢？答案是肯定的。\r\n```javascript\r\n// code.js\r\nvar moduleA = require(\'events\').EventEmitter();\r\n\r\nmoduleA.on(\'whatever\', function () {\r\n});\r\n```\r\n当 code.js 模块被更新，并且所有引用被移出后，只要 moduleA 没有被其他未释放的模块引用， moduleA 也会被自动释放，包括我们在其内部的事件监听。\r\n\r\n只有一种畸形的 EventEmitter 应用场景在这套体系下无法应对，即 code.js 每次执行的时候都会去监听一个全局对象的事件，这样会造成全局对象上不停的挂载事件，同时 Node.js 会很快的提示检测到过多的事件绑定，疑似内存泄露。\r\n\r\n至此，可以看到只要处理好了 require 系统中 Node.js 为我们自动添加的引用，老模块的资源回收并不是大问题，虽然我们无法做到像 Erlang 一样实现下一次热更新对还留存的老模块进行扫描这样细粒度的控制，但是我们可以通过合理的规避手段，解决老模块资源释放的问题。\r\n\r\n在 Web 应用下，还有一个引用问题就是未释放的模块或者核心模块对需要热更新的模块有引用，如 app.use，导致老模块的资源无法释放，并且新的请求无法正确的使用新模块进行处理。解决这个问题的手段就是控制全局变量或者引用的暴露的入口，在热更新执行的过程中手动更新入口。如 如何使用新模块处理请求 中对 router 的封装就是一个例子，通过这一个入口的控制，我们在 router.js 中无论如何引用其他模块，都会随着入口的释放而释放。\r\n\r\n另一个会引起资源释放问题的就是类似 setInterval 这类操作，会保持对象的生命周期无法释放，不过在 Web 应用中我们极少会使用这类技术，因此方案中并未关注。\r\n## 尾声\r\n\r\n至此，我们就解决了 Node.js 在 Web 应用下代码热更新的三大问题，不过由于 Node.js 本身缺乏对有效的留存对象的扫描机制，因此并不能100%的消除类似 setInterval 导致的老模块的资源无法释放的问题。也是由于这样的局限性，目前我们提供的 YOG2 框架中，主要还是将此技术应用于开发调试期，通过热更新实现快速开发。而生产环境的代码更新依然使用重启或者 PM2 的 hot reload 功能来保证线上服务的稳定性。\r\n\r\n由于热更新实际上与框架和业务架构紧密相关，因此本文并未给出一个通用的解决方案。作为参考，简单的介绍一下在 YOG2 框架中我们是如何使用这项技术的。由于 YOG2 框架本身就支持前后端子系统 App 拆分，因此我们的更新策略是以 App 为粒度更新代码。同时由于类似 fs.watch 这类操作会有兼容性问题，一些替代方案如 fs.watchFile 则会比较消耗性能，因此我们结合了 YOG2 的测试机部署功能，通过上传部署新代码的形式告知框架需要更新 App 代码。在以 App 为粒度更新模块缓存的同时，会更新路由缓存与模板缓存，来完成所有代码的更新工作。\r\n\r\n如果你使用的是类似 Express 或者 Koa 这类框架，只需要按照文中的方法结合自身业务需要，对主路由进行一些改造，就可以很好的应用这项技术。\r\n\r\n ## 参考资料\r\n\r\nhttp://romeda.org/blog/2010/01/hot-code-loading-in-nodejs.html\r\nhttps://github.com/rlidwka/node-hotswap\r\nhttp://en.wikipedia.org/wiki/Hot_swapping\r\n作者：fangshi (https://github.com/hefangshi) - Onwards & Upwards ', '2015-10-29 13:34:07', '2015-11-03 17:24:32', '1', '性能优化', 'xnyh', null, '0');
INSERT INTO `article` VALUES ('3', '1111111', 'article_1448520407122', '1111111', '/upload/article/1448520407122.png', 'admin', '123123123123\r\n#### eqw\r\nwqeqweqweqw\r\n', '2015-11-27 14:46:14', null, '2', '性能优化', 'xnyh', null, '0');
INSERT INTO `article` VALUES ('4', '轻量级的双向绑定工具 —— ukulelejs', 'article_1449456182990', '轻量级的双向绑定工具 —— ukulelejs', '/upload/article/1449456182990.png', 'admin', '# 什么是Ukulelejs\r\n一个轻量级的双向绑定工具，你可以把它暂时理解为精简版的Angular。(以下简称ukujs)\r\n注：最新版的ukujs已经加入了webcomponents的一些基本实现\r\n## 先来看一个最简单的双向绑定例子\r\n```\r\n<div uku-application>\r\n    <input type=\"text\" uku-value=\"myCtrl.message\">\r\n    <input type=\"text\" uku-value=\"myCtrl.message\">\r\n    <textarea rows=\"4\" uku-value=\"myCtrl.message\"></textarea>\r\n</div>\r\n```\r\n```\r\nvar uku = new Ukulele();\r\nuku.registerController(\"myCtrl\",new MyController());\r\n```\r\n```\r\nfunction MyController(){\r\n    this.hello = \"hello, ukulele\";\r\n}\r\n```\r\n[![](http://segmentfault.com/img/bVqs7K)](http://segmentfault.com/img/bVqs7K)\r\n#什么是Ukulele\r\n![](/upload/img/0.7960061370395124.png)\r\n还记得这个风靡网络的视频么？这个小正太手里捧着的可爱乐器就叫做Ukulele\r\n> Ukulele是一种来自于夏威夷的4弦小吉他，念作尤克里里（台译：乌克里里）\r\n\r\n## 既然已经有了Angularjs,为何还要再去造个轮子\r\n![](/upload/img/0.9766789462883025.jpg)\r\n![](/upload/img/0.5666678594425321.png)\r\nUkujs的诞生就是为了解决这些问题。\r\n\r\n# 安装 UkuleleJS\r\n```\r\n$npm install -g bower\r\nbower install ukulelejs#pure\r\n```\r\n# 让我们开始\r\n## 原生方式\r\n**Import ukulelejs\'s library**\r\n```html\r\n<head>\r\n	...\r\n	<script type=\"text/javascript\" src=\"ukulelejs/dist/ukulele.min.js\"></script>\r\n	...\r\n<head/>\r\n```\r\n\r\n**将 \'uku-application\' 作为一个属性添加到任意一个html的标签中, 之后ukujs就会托管这个html标签**\r\n\r\n```html\r\n<body uku-application>\r\n	...\r\n</body>\r\n```\r\n初始化 ukulelejs 并且 注册 Controller\r\n```javascript\r\n...\r\n</body>\r\n<script>\r\n...\r\nvar uku = new Ukulele();\r\nuku.registerController(\"myCtrl\", new MyController());\r\nuku.init();\r\n\r\nfunction MyController() {\r\n	this.message = \"\";\r\n	....\r\n}\r\n</script>\r\n```\r\n**绑定模型与html标签的属性, 你只需要添加 \'uku-\' + 在属性名的前面即可, 使用 {{}} 以文本形式显示属性的值 **\r\n```html\r\n<body uku-application>\r\n	...\r\n	<input type=\"text\" uku-value=\"myCtrl.message\">\r\n	<h3>{{myCtrl.message}}<h3/>\r\n	...\r\n</body>	\r\n```\r\n\r\n***\r\n## AMD 方式\r\n**RequireJS\'s configuration**\r\n```javascript\r\nrequire.config({\r\n    paths: {\r\n	\"domReady\": \'bower_components/domReady/domReady\',\r\n        \"ukulele\": \'build/js/ukulele\'\r\n    },\r\n    shim:{  	\r\n		\"ukulele\":{\r\n			exports:\"Ukulele\"\r\n		}\r\n    }\r\n});\r\n```\r\n**将 \'uku-application\' 作为一个属性添加到任意一个html的标签中, 之后ukujs就会托管这个html标签**\r\n```html\r\n<body uku-application>\r\n	...\r\n</body>\r\n```\r\n**在 domReady 的回调函数中注册ukulelejs并注册controller**\r\n```javascript\r\nrequire([\"domReady\",\"ukulele\",\"MyController\"], function(domReady,Ukulele,MyController) {\r\n	var uku;\r\n	domReady(function() {\r\n		uku = new Ukulele();\r\n		uku.registerController(\"myCtrl\", new MyController(uku));\r\n		uku.init();\r\n	});\r\n\r\n});\r\ndefine(\"MyController\",function(){\r\n	return function() {\r\n		this.message = \"\";\r\n		...\r\n	};\r\n});\r\n```\r\n**绑定模型与html标签的属性, 你只需要添加 \'uku-\' + 在属性名的前面即可, 使用 {{}} 以文本形式显示属性的值 **\r\n```html\r\n<body uku-application>\r\n	...\r\n	<input type=\"text\" uku-value=\"myCtrl.message\">\r\n	<h3>{{myCtrl.message}}<h3/>\r\n	...\r\n</body>\r\n```\r\n\r\n***\r\n### 更多的使用方式和API请查看 [http://ukujs.tiger.mopaasapp.com/](http://ukujs.tiger.mopaasapp.com/)', '2015-12-07 10:43:03', null, '1', '性能优化', 'xnyh', null, '1');
INSERT INTO `article` VALUES ('5', '(1)开坑，写点Polymer 1.0 教程第0篇——介绍篇', 'article_1449471123000', '开坑，写点Polymer 1.0 教程第0篇——介绍篇', '/upload/article/1449471226800.png', 'admin', '##写在最前##\r\n我是一名近2年由Flex转web的老前端，纵观目前web界群魔乱舞的局面，个人认为目前比较火热的Angular和这篇文章要介绍的polymer是最适合我过渡的两种技术选型（由flex过渡到html+js）。相比其它web components技术，如react，我更看好polymer这种方式，它更加直观，自然，优雅，更加适合传统前端程序员的思维。由于国内polymer的资料比较少，官网在大墙之外也难于访问，我打算开个坑，一边自己学习，一边翻译和批注（扩展并添油加醋）一些官网的guide，期望大家一起来关注web components这个前端必然的发展方向。\r\n当然也请不要怀疑我这个半路出家的web前端的专业性，本人接触组件化开发模式已有8年时间了，在学习的过程中我会就自己对组件化的一些经验和理解来检验Polymer的真身。\r\n![图片描述][1]\r\n\r\n##名词约定##\r\n由于对于web一些技术名词的定义五花八门，什么控件，组件，标签，插件，我在这里做一个统一规范，并会在后面的教程里遵循这个规范。\r\n\r\n - **标签**：如<input>, <table>这些原生tag\r\n - **组件**：由<input>, <table>等这些原生的标签组成的自定义组件。如：<user-list></user-list>\r\n![图片描述][2]\r\n\r\n##什么是Polymer？##\r\nPolymer 英文发音 [\'pɒlɪmə]（念作： 抛了吗？  你股票Polymer？）意为高分子聚合物\r\n> Polymer是个给前端开发人员使用的类库，它可以让前端码农们更加简单，快速的开发现代化的，更屌的可重用组件。\r\n\r\n###用自定义的标签来扩展web应用###\r\n原生的html已经提供了一些内置的标签，如<button>,<form>以及<table>。每个原生标签都有自己的属性，方法，和事件。每个标签也有自己的内置样式，当然这些样式可以用自己的css来覆盖。\r\n\r\n任何码农都可以用这些原生标签来制作一个简单的web页面。但是它们的功能是有限的。如果你要制作一个简单的tabs功能的组件（因为原生的标签不提供这个功能），就需要加上你自己的js代码和css样式。\r\n\r\n如果使用了咱们（注意发音时候要特别嘚瑟）Polymer制作滴自定义标签，你就可以凭借一己之力扩展原生的html标签库了（多骄傲，倍儿有面子）。\r\n![图片描述][3]\r\n```\r\n<my-tabstrip>\r\n  <my-tab>\r\n    Home\r\n  </my-tab>\r\n  <my-tab>\r\n    Services\r\n  </my-tab>\r\n  <my-tab>\r\n    Contact Us\r\n  </my-tab>\r\n<my-tabstrip>\r\n```\r\n## 辣么，Polymer是web组件么？，是自定义标签么？ ##\r\n\r\nPolymer都不是，它其实不提供具体的组件，它只是个工具来帮助你创造出属于自己的自定义组件。你可以把它类比成俄罗斯方块\r\n![图片描述][4]\r\n俄罗斯方块只提供了4个像素组成的5种基本形状。如果你缺少某种由5个像素组组成的异形方块，\r\n比如这种\r\n![图片描述][5]\r\n这个时候就要用polymer这个胶水去扩展目前4个像素的方块，把它扩展成你需要的形状。\r\n以下这幅来自官网的图片描述的Polymer的地位和角色\r\n![图片描述][6]\r\n由上图可见，自定义组件（Custom Element）是利用Polymer这个工具基于原生的html标签（Web components primitives）开发的。\r\n- **Web Components**：原生的html标签\r\n- **The Polymer library**： 提供一种语法，来让你创建自定义组件，你的自定义组件会拥有模板，双向绑定，属性监控等功能，让你用更少的代码写出更酷炫的控件。\r\n- ** Custom elements**： 你的产出物，也就是自定义组件。如果你是伸手党，辣么恭喜你，polymer已经为你这样的懒人提供了一大套现成的自定义组件库。你在polymer的环境中直接使用它们就行。\r\n\r\n\r\n你足够屌可以自己定制自己的组件，如果修行不够，也可大大方方滴占用他人的劳动成果，（优秀的组件可能都会被提供出来，当然也不排除一些大公司制作出一整套非常好用的组件候用于商业用途，需要有偿使用等等，具体我也不清楚，以后整个web components的运作模式可能会类似于apple的app store，有官方软件，有免费第三方和收费第三方）\r\n![图片描述][7]\r\n\r\n##获得这些现成的自定义标签##\r\n以下是Polymer team自己实现的一些扩展，请戳（需要翻墙）\r\n[https://elements.polymer-project.org/][8]\r\n\r\n##本章参考官网内容的链接##\r\n[https://www.polymer-project.org/1.0/docs/start/getting-the-code.html][9]\r\n\r\n好了，介绍篇结束。\r\n\r\n\r\n  [1]: http://segmentfault.com/img/bVp9ic\r\n  [2]: http://segmentfault.com/img/bVp9it\r\n  [3]: http://segmentfault.com/img/bVp9iP\r\n  [4]: http://segmentfault.com/img/bVp8Zb\r\n  [5]: http://segmentfault.com/img/bVp9hq\r\n  [6]: http://segmentfault.com/img/bVp806\r\n  [7]: http://segmentfault.com/img/bVp9iX\r\n  [8]: https://elements.polymer-project.org/\r\n  [9]: https://www.polymer-project.org/1.0/docs/start/getting-the-code.html', '2015-12-07 14:52:03', '2015-12-07 15:11:32', '1', '前沿技术', 'qyjs', null, '0');
INSERT INTO `article` VALUES ('6', '(2)开坑，写点Polymer 1.0 教程第1篇——安装篇', 'article_1449471408369', '(2)开坑，写点Polymer 1.0 教程第1篇——安装篇', '/upload/article/1449471408369.png', 'admin', '书接上回\r\n上一篇我们介绍了神马是Polymer，这一篇我们来做些正式编码前的准备工作，顺便也扯一扯Polymer的真面目\r\n\r\n##如何安装Polymer##\r\n有两种方式：\r\n第一种是bower安装，不要问我bower是什么，不会bower的话，也不建议你现在开始学习Polymer\r\n![图片描述][2]\r\n```\r\nbower init\r\nbower install --save Polymer/polymer#^1.1.0\r\n```\r\n安装成功后会在bower.json中生成如下依赖配置\r\n\r\n```json\r\n{\r\n  \"name\": \"my-project\",\r\n  \"version\": \"0.0.0\",\r\n  \"dependencies\": {\r\n    \"polymer\": \"Polymer/polymer#^1.1.0\"\r\n  }\r\n}\r\n```\r\n如果日后Polymer发布了新版本，你只需执行以下命令就能更新\r\n\r\n```\r\nbower update\r\n```\r\n\r\n第二种就是最原始的下载js库的方式，适合不会bower，却硬要现在就开始学习Polymer要强的同学。\r\n![图片描述][3]\r\n地址请戳 [polymer_1.1.0.zip][4]\r\n\r\n不管你使用的是那种方式，load下来的库都是如下结构\r\n![图片描述][5]\r\n\r\n细心的朋友会觉得比较奇怪，为什么polymer库里面的核心库不叫polymer.js,而是存放在webcomponentsjs下的webcomponents.js或者\r\nwebcomponentsjs-lite.js\r\n\r\n##这里要来说一说Polymer的真面目了。##\r\n![图片描述][6]\r\nPolymer其实真正意义上来说并不是一个类库，它严格上来讲应该是web components native化的规范的项目代号，它是构建在web components技术最前沿的一个东西，由于太过超前，目前市面上很多浏览器都不能支持web components的规范特性。所以Polymer又以一个js库的身份出现在世人面前，它现阶段要做的就是使用web components的规范来进行开发，并且提供了一套底层实现来填补了各大浏览器暂不支持的gap，我们称为polyfills（填充物）,也就是webcomponents.js要干的事情。未来在理想状态下（等web components规范成熟，各大浏览器都原生支持了），我们可以在不需要引入webcomponents.js的情况下，实现现阶段所有的工作。也就是说你现在的依赖webcomponents.js写出的代码，以后将被浏览器原生支持。\r\n\r\n比如下图：google自家的chrome就以原生支持web component规范，所以不需要导入polyfills（填充物）就能直接运行Polymer代码。但是其它浏览器却不能work\r\n![图片描述][7]\r\n一定要引入Polyfills，FF和IE才可以work\r\n![图片描述][8]\r\n\r\n##扯远了，继续安装##\r\n这个谁都会，引入核心类库，准备工作做好下一章节，我们就可以开始干活了。\r\n```javascript\r\n<script src=\"bower_components/webcomponentsjs/webcomponents.min.js\"></script>\r\n```\r\n\r\n本篇完，在下一节我们会具体跑一个hello world来感受下polymer的魅力\r\n\r\n\r\n  [2]: http://segmentfault.com/img/bVp9Et\r\n  [3]: http://segmentfault.com/img/bVp9Er\r\n  [4]: http://zipper.bowerarchiver.appspot.com/archive?polymer=Polymer/polymer#%5E1.1.0\r\n  [5]: http://segmentfault.com/img/bVp9A1\r\n  [6]: http://segmentfault.com/img/bVp9Ev\r\n  [7]: http://segmentfault.com/img/bVp9E3\r\n  [8]: http://segmentfault.com/img/bVp9Fo', '2015-12-07 14:56:48', '2015-12-07 16:12:50', '1', '前沿技术', 'qyjs', null, '0');
INSERT INTO `article` VALUES ('7', '(3)开坑，写点Polymer 1.0 教程第2篇(上)——hello world篇', 'article_1449471518252', '(3)开坑，写点Polymer 1.0 教程第2篇(上)——hello world篇', '/upload/article/1449471518252.png', 'admin', '书接上回，我们已经把运行Polymer的准备工作做好，接下来就敲点代码来感受下它到底是个什么东东，这一篇里我基本会照搬官网Quick tour的几个例子来快速过一下。\r\n\r\n##注册一个自定义组件##\r\n\r\n> 需要调用**Polymer**这个function才能在浏览器中注册一个新的组件，你需要给这个新组件关联一个标签名，你也可以在这个组件上添加你自定义的属性和方法。非常重要的一点是，**这个组件的标签名必须要以“-”符号分割**。\r\n> 你需要把这个组件的各种定义封装在一个对象里作为参数传入到Polymer函数中去。\r\n\r\nproto-element.html(自定义组件)\r\n```\r\n<link rel=\"import\"\r\n      href=\"bower_components/polymer/polymer.html\">\r\n<!-- link rel=\"import\" 这种写法可能比较陌生，其实就是导入一个已经封装好的自定义组件，这里导入了polymer.html你可以打开看一下里面有对Polymer function的定义 -->\r\n<script>\r\n  // register a new element called proto-element\r\n  Polymer({\r\n    is: \"proto-element\", //is来标示组件的标签名\r\n    // add a callback to the element\'s prototype\r\n    ready: function() { //ready是组件生命周期的一部分，这块以后会具体开一篇介绍\r\n      this.textContent = \"I\'m a proto-element. Check out my prototype!\"  //为组件赋上一段文字\r\n    }\r\n  });\r\n</script>\r\n```\r\n\r\nindex.html\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"proto-element.html\">\r\n    <!-- 这里就是导入了上面已经定义好的自定义组件 proto-element -->\r\n  </head>\r\n  <body>\r\n    <proto-element></proto-element><!-- 用标签的形式加载自定义组件-->\r\n  </body>\r\n</html>\r\n```\r\n运行效果\r\n![图片描述][2]\r\n##Add local DOM##\r\n上面这个例子只是将一段text封装成一个组件，在实际使用过程中我们很少会这么干，绝大部分情况下我们封装的最小颗粒都是原生的标签，下面这个例子就对dom进行封装（官网称为local dom）\r\n\r\ndom-element.html\r\n\r\n```\r\n<link rel=\"import\"\r\n      href=\"bower_components/polymer/polymer.html\">\r\n\r\n<dom-module id=\"dom-element\">\r\n\r\n  <template>\r\n    <p>I\'m a DOM element. This is my local DOM!</p>\r\n  </template>\r\n<!--这里用一个template标签来封装了dom-->\r\n  <script>\r\n    Polymer({\r\n      is: \"dom-element\"\r\n    });\r\n  </script>\r\n\r\n</dom-module><!--最外层也用了dom-module来包裹-->\r\n```\r\nindex.html\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"dom-element.html\">\r\n  </head>\r\n  <body>\r\n    <dom-element></dom-element>\r\n  </body>\r\n</html>\r\n```\r\n运行结果\r\n![图片描述][3]\r\n##Compose with local DOM##\r\n这个功能不太好翻译，大概意思就是你可以把一些子组件或者子标签通过标签嵌套的方式插入到父的组件中去，语言可能不太好描述，咱们直接用代码说话\r\npicture-frame.html\r\n\r\n```\r\n<link rel=\"import\"\r\n      href=\"bower_components/polymer/polymer.html\">\r\n\r\n<dom-module id=\"picture-frame\">\r\n\r\n  <template>\r\n    <!-- scoped CSS for this element -->\r\n    <style>\r\n      div {\r\n        display: inline-block;\r\n        background-color: #ccc;\r\n        border-radius: 8px;\r\n        padding: 4px;\r\n      }\r\n    </style>\r\n    <div>\r\n      <!-- any children are rendered here -->\r\n      <content></content>\r\n      <!--注意这里使用了content标签，子组件或者标签将被插入到这里-->\r\n    </div>\r\n  </template>\r\n\r\n  <script>\r\n    Polymer({\r\n      is: \"picture-frame\",\r\n    });\r\n  </script>\r\n\r\n</dom-module>\r\n```\r\nindex.html\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"picture-frame.html\">\r\n  </head>\r\n  <body>\r\n    <picture-frame>\r\n      <img src=\"images/p-logo.svg\"><!--此处就是讲一个原生的img标签作为子组件插入到picture-frame中去-->\r\n    </picture-frame>\r\n  </body>\r\n</html>\r\n```\r\n运行结果\r\n![图片描述][4]\r\n\r\nhello world的上篇完毕，下篇会继续讲到自定义组件的双向绑定，自定义属性等功能。\r\n\r\n\r\n  [2]: http://segmentfault.com/img/bVp9KZ\r\n  [3]: http://segmentfault.com/img/bVp9Lo\r\n  [4]: http://segmentfault.com/img/bVp9LD', '2015-12-07 14:58:38', '2015-12-07 16:13:18', '1', '前沿技术', 'qyjs', null, '0');
INSERT INTO `article` VALUES ('8', '(4)开坑，写点Polymer 1.0 教程第2篇(下)——hello world篇', 'article_1449471569905', '(4)开坑，写点Polymer 1.0 教程第2篇(下)——hello world篇', '/upload/article/1449471569905.png', 'admin', '书接上回，上回叔说到如何注册（创建）一个自定义组件，这回我们来讲讲它的数据绑定。\r\n##使用数据绑定##\r\n当然，你可能不会仅仅满足上文教的简单的静态自定义组件，你通常需要动态的更新你的dom组件。\r\n\r\n数据绑定是一个非常屌的的办法能让你快速的传播组件的变化，减少代码的行数。你可以用双大括弧{{}}来声明你需要绑定的属性，大括弧在运行时会被替换成括弧内的属性值。\r\n\r\nname-tag.html\r\n\r\n```\r\n<link rel=\"import\"\r\n      href=\"bower_components/polymer/polymer.html\">\r\n\r\n<dom-module id=\"name-tag\">\r\n\r\n  <template>\r\n    <!-- bind to the \"owner\" property -->\r\n    This is <b>{{owner}}</b>\'s name-tag element.\r\n  </template>\r\n\r\n  <script>\r\n  Polymer({\r\n    is: \"name-tag\",\r\n    ready: function() {\r\n      // set this element\'s owner property\r\n      this.owner = \"Daniel\";\r\n    }\r\n  });\r\n  </script>\r\n  \r\n</dom-module>\r\n```\r\nindex.html\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"name-tag.html\">\r\n  </head>\r\n  <body>\r\n    <name-tag></name-tag>\r\n  </body>\r\n</html>\r\n```\r\n\r\n运行结果\r\n![图片描述][2]\r\n\r\n###声明properties###\r\n我们可以看到owner这一变量已经和<b/>标签绑定在一起了，但是这是在组件ready阶段才给owner赋的值，下面会介绍另外一种定义绑定属性的方式\r\n定义——声明properties属性（如同声明is属性来定义自定义的组件的标签名一样）\r\n\r\n> properties是自定义组件公共api中非常重要的一个组成部分，你可以通过它来定义默认值，配置标签上的属性值，也可以用啦观测属性的变化等等\r\n\r\n在接下去的例子中，我们将声明一个带有默认值的owner属性，并将index.html中对这个属性进行赋值操作\r\n\r\nconfigurable-name-tag.html\r\n\r\n```\r\n<link rel=\"import\"\r\n      href=\"bower_components/polymer/polymer.html\">\r\n\r\n<dom-module id=\"configurable-name-tag\">\r\n\r\n  <template>\r\n    <!-- bind to the \"owner\" property -->\r\n    This is <b>{{owner}}</b>\'s configurable-name-tag element.\r\n  </template>\r\n\r\n  <script>\r\n    Polymer({\r\n      is: \"configurable-name-tag\",\r\n      properties: {\r\n        // declare the owner property\r\n        owner: {\r\n          type: String,\r\n          value: \"Daniel\"  //默认值\r\n        }\r\n      }\r\n    });\r\n  </script>\r\n  \r\n</dom-module>\r\n```\r\n\r\nindex.html\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"configurable-name-tag.html\">\r\n  </head>\r\n  <body>\r\n    <!-- configure a property from markup by setting\r\n         the corresponding attribute                 -->\r\n    <configurable-name-tag owner=\"Scott\"></configurable-name-tag>\r\n    <!--在这里我们队owner进行了赋值，就像操作input的value一样对其进行赋值-->\r\n  </body>\r\n</html>\r\n```\r\n\r\n###双向绑定###\r\n除了绑定文本（如上例， 变量 -> 组件）以外，Polymer还支持双向绑定\r\n（变量 -> 组件 -> 组件change -> 变量）\r\n\r\nedit-element.html\r\n\r\n```\r\n<dom-module id=\"edit-element\">\r\n    <template>\r\n        <p>\r\n            This is a <strong>{{owner}}</strong>\'s edit-element.\r\n        </p>\r\n        <input value=\"{{owner::input}}\" placeholder=\"Your name here...\">\r\n    </template>\r\n\r\n    <script>\r\n        Polymer({\r\n            is: \"edit-element\",\r\n            properties: {\r\n                owner: {\r\n                    type: String,\r\n                    value: \"Daniel\"\r\n                }\r\n            }\r\n        });\r\n    </script>\r\n</dom-module>\r\n```\r\nindex.html\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"edit-element.html\">\r\n</head>\r\n\r\n<body>\r\n    <edit-element></edit-element>\r\n</body>\r\n\r\n</html>\r\n```\r\n运行结果\r\n![图片描述][3]\r\n\r\nPolymer是通过事件名的约定来实现双向绑定的（关于数据绑定以后会开一张自己讲），但是原生标签一开始并不在Polymer的生态圈内，所以没有遵循这一约定，因此对于原生标签，我们需要按照下面的格式来给它这是一个自定义的change事件声明，格式如下\r\n\r\n```\r\ntarget-prop=\"{{hostProp::target-change-event}}\"\r\n```\r\n举个例子：\r\n如果是对input type=\"text\"的文本框进行双向绑定，你就可以这样写\r\n\r\n```\r\n<input type=\"text\" value=\"{{owner::input}}\"\r\n```\r\n或者\r\n\r\n```\r\n<input type=\"text\" value=\"{{owner::change}}\"\r\n```\r\n::符号后的都是事件名，两者区别是input事件每次按下键盘都会触发双向绑定的更新，而change事件只在光标失去焦点的时候触发双向绑定的更新。\r\n\r\n\r\n本篇完，下篇还没想好要写啥。\r\n\r\n  [2]: http://segmentfault.com/img/bVqba7\r\n  [3]: http://segmentfault.com/img/bVqbdB', '2015-12-07 14:59:29', '2015-12-07 16:13:40', '1', '前沿技术', 'qyjs', null, '0');
INSERT INTO `article` VALUES ('9', '(5)开坑，写点Polymer 1.0 教程第3篇——组件注册与创建', 'article_1449472050178', '(5)开坑，写点Polymer 1.0 教程第3篇——组件注册与创建', '/upload/article/1449472050178.png', 'admin', '之前一篇算是带大家大致领略了一下Polymer的风采。这篇我们稍微深入一丢丢，讲下组件的注册和创建。\r\n\r\n##创建自定义组件的几种方式##\r\n这里我们使用Polymer函数注册了一个自定义组件\"my-element\"\r\n```\r\n// register an element\r\nPolymer({\r\n  is: \'my-element\',\r\n  created: function() {\r\n    this.textContent = \'My element!\';\r\n  }\r\n});\r\n```\r\n在hello world篇中我们使用的是直接在html页面里写标签的方式来创建这个自定义组件\r\n```\r\n<div>\r\n    <my-element></my-element>\r\n</div>\r\n```\r\n但是如果my-element需要被动态创建，使用上面的方式显然就满足不了要求。所以Polymer提供了另外2种创建方式\r\n第一种\r\n```\r\nvar element = document.createElement(\'my-element\');\r\n```\r\n啊，我们可以调用原生dom api一样来创建自定义组件了，这是一件多么让人愉悦的事情。\r\n我们来测试一下\r\n![图片描述][1]\r\n\r\n第二种\r\n这种方式需要我们在注册自定义组件的时候进行一点小的改动，调用Polymer函数定义的时候把返回值赋个一个全局变量MyElement\r\n```\r\n// register an element\r\nMyElement = Polymer({\r\n  is: \'my-element\',\r\n  created: function() {\r\n    this.textContent = \'My element!\';\r\n  }\r\n});\r\n```\r\n```\r\nvar el2 = new MyElement();\r\n```\r\n从这里可以得知Polymer函数会返回一个自定义组件的构造函数，使用new就可以创建它了。\r\n我们来测试一下\r\n![图片描述][2]\r\n\r\n对于这种方法，Polymer还提供了一个接口factoryImpl可以让我们在创建自定义组件的时候传入运行时的构造参数，而不是只能死死地使用注册组件时候定义的内容。\r\n我们修改下例子\r\n\r\n```\r\n<dom-module id=\"my-element\">\r\n    <template>\r\n        <p>{{helloMessage}}</p>\r\n    </template>\r\n    <script>\r\n        MyElement = Polymer({\r\n            is: \'my-element\',\r\n            properties: {\r\n                helloMessage: {\r\n                    value: \"hi\",\r\n                    type: \"string\"\r\n                }\r\n            },\r\n            //定义factoryImpl借口，构造时将helloMessage重新赋值\r\n            factoryImpl: function (message) {\r\n                this.helloMessage = message;\r\n            }\r\n        });\r\n    </script>\r\n</dom-module>\r\n```\r\n测试一下\r\n![图片描述][3]\r\n这种构造函数传参的方式只适用于，new CustomElement的创建方式，而且它2种方式不支持，原因你自己拍脑袋想想就懂了。\r\n\r\nfactoryImpl 被调用的时机是在dom被创建，默认值被设置了以后，具体的我们会在生命周期篇里谈。\r\n\r\n##扩展原生的html标签##\r\n首先告诉大家一个非常遗憾的消息，Polymer当前版本暂不支持扩展自己定义组件（既自己不能扩展自己，但是会在以后版本中支持大家请擦干净鼻涕静静等待），目前只能扩展原生的html标签如input， button等。Polymer提供了一个extends接口来实现扩展\r\n\r\nmy-input.html\r\n```\r\n<script>\r\n    MyInput = Polymer({\r\n        is: \'my-input\',\r\n        extends: \'input\',\r\n        created: function () {\r\n            // 我们扩展组件的外观使之变成红色边框\r\n            this.style.border = \'1px solid red\';\r\n        }\r\n\r\n    });\r\n</script>\r\n```\r\n![图片描述][4]\r\n\r\n如果使用的是dom api我们需要这样来创建\r\n\r\n```\r\nvar el1 = document.createElement(\'input\', \'my-input\')\r\n```\r\n如果使用html标签的方式，我们要这样写\r\n```\r\n<input is=\"my-input\">\r\n```\r\n窃以为，后面2种方式来创建一个组件是非常非常扯蛋的一件事情，使用者必须非常清楚组件的继承关系，你说这还不扯蛋么？期望Polymer在后续版本的api中对于组件扩展这一块内容，消灭以上两种不靠谱的创建方式。\r\n\r\n##在html主文件里定义“自定义组件\r\n\r\n> 首先说下，只有在写demo的时候，才会用到这种写法。生产环境中，都是需要把组件写在各自独立的文件中。\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.js\">\r\n    </script>\r\n    <link rel=\"import\" href=\"bower_components/polymer/polymer.html\">\r\n    <title>Defining a Polymer Element from the Main Document</title>\r\n  </head>\r\n  <body>\r\n    <dom-module id=\"main-document-element\">\r\n      <template>\r\n        <p>\r\n          Hi! I\'m a Polymer element that was defined in the\r\n          main document!\r\n        </p>\r\n      </template>\r\n      <script>\r\n        HTMLImports.whenReady(function () {\r\n          Polymer({\r\n            is: \'main-document-element\'\r\n          });\r\n        });\r\n      </script>\r\n    </dom-module>\r\n    <main-document-element></main-document-element>\r\n  </body>\r\n</html>\r\n\r\n```\r\nHTMLImports.whenReady()这个方法你可以把它理解成JQ里的document.ready()或者AMD里的domReady(),可以确保引用的组件dom都被加载完了再进行下一步的调用，一般都是用在index.html也就是程序的入口处。\r\n\r\n  [1]: http://segmentfault.com//img/bVqbVa\r\n  [2]: http://segmentfault.com//img/bVqbVt\r\n  [3]: http://segmentfault.com//img/bVqbXm\r\n  [4]: http://segmentfault.com//img/bVqbXN', '2015-12-07 15:07:30', null, '1', '前沿技术', 'qyjs', null, '0');
INSERT INTO `article` VALUES ('10', '(6)开坑，写点Polymer 1.0 教程第4篇——组件的生命周期', 'article_1449472134291', '(6)开坑，写点Polymer 1.0 教程第4篇——组件的生命周期', '/upload/article/1449472134291.png', 'admin', '这篇来谈谈polymer最核心的一块，也可以说是web components技术最最核心的一块内容 “生命周期”，大家在学习一些框架的时候最好都去了解一下它们的生命周期。\r\n##什么是生命周期##\r\n什么是生命周期？故名思议，拿人的例子来说，比如出生，上学，工作，结婚，生子，死亡等等，一生中几个重要阶段。组件也一样，从被创建，被解析，被赋初始化值，被添加到舞台，被绘制，被布局，使用过程中被修改了值，被重绘，被重新布局，最终被父组件移除结束惨淡的一身等等，都可以称为组件的生命周期。\r\n\r\n来看看Polymer提供了那些我们可以catch到的大事件（按触发的顺序）。。\r\n**1.created callback**：当组件被 new 时调用，最早被触发，此时还不能访问组件的属性\r\n**2.ready callback** ：当组件内部依赖的子组件或者原生dom组件加载成功，会调用ready\r\n**3.factoryImpl callback** ：只有使用new ElementClass()方式创建组件时会被调用，发生在ready后\r\n**4.attached callback** ：组件被添加到父组件中（显示在舞台）时触发，只会触发一次\r\n\r\n**5.attributeChanged callback** ：组件被父组件设置属性时触发，只有使用setAttribute()方式设置属性才会触发，切记！（elementInstance.attr = xxx, <my-element att=\"xxx\"></my-element>都不会触发它）\r\n**6.detached callback** ：当被父组件removeChild时候触发（即被移出舞台）\r\n\r\n你跑一下下面的例子后，自己修修改改试一下就能大致体会，（光看文字的效果不如你自己跑一下代码）\r\nmy-element.html\r\n\r\n```\r\n<link rel=\"import\" href=\"../bower_components/polymer/polymer.html\">\r\n<dom-module id=\"my-element\">\r\n    <template>\r\n        <p>{{name}}</p>\r\n        <button on-click=\"handleClick\">change by self</button>\r\n    </template>\r\n    <script>\r\n        MyElement = Polymer({\r\n\r\n            is: \'my-element\',\r\n            properties: {\r\n                name: {\r\n                    value: \"default name\",\r\n                    type: \"String\"\r\n                }\r\n            },\r\n            \r\n            handleClick: function(){\r\n                this.setAttribute(\"name\",\"name was set by parent\");\r\n            },\r\n\r\n            created: function () {\r\n                console.log(this.localName + \'#\' + this.id + \' was created\');\r\n            },\r\n\r\n            attached: function () {\r\n                console.log(this.localName + \'#\' + this.id + \' was attached\');\r\n            },\r\n\r\n            detached: function () {\r\n                console.log(this.localName + \'#\' + this.id + \' was detached\');\r\n            },\r\n\r\n            attributeChanged: function (name, type) {\r\n                console.log(this.localName + \'#\' + this.id + \' attribute \' + name +\r\n                    \' was changed to \' + this.getAttribute(name));\r\n            },\r\n            \r\n            ready:function(){\r\n                console.log(this.localName + \'#\' + this.id + \' was ready\');\r\n            },\r\n            \r\n            factoryImpl: function(){\r\n                console.log(this.localName + \'#\' + this.id + \' was factoryImpl\');\r\n            }\r\n\r\n        });\r\n    </script>\r\n</dom-module>\r\n```\r\n\r\nparent-element.html\r\n\r\n```\r\n<link rel=\"import\" href=\"../bower_components/polymer/polymer.html\">\r\n<link rel=\"import\" href=\"my-element.html\">\r\n<dom-module id=\"parent-element\">\r\n    <template>\r\n        <my-element id=\"myElement\" name=\"name was set by tag\'s method\"></my-element>\r\n        <button on-click=\"handleChange\">change by parent</button>\r\n        <button on-click=\"handleRemove\">remove</button>\r\n    </template>\r\n    <script>\r\n        ParentElement = Polymer({\r\n            is: \'parent-element\',\r\n            handleChange: function(){\r\n                var myElement = document.getElementById(\"myElement\");\r\n                myElement.setAttribute(\"name\",\"name was set by self\");\r\n            },\r\n            handleRemove: function(){\r\n                //补充一下这里$符号的作用是可以用$.id的方式快速访问子组件（上面个handleChange函数则是传统方式）\r\n                this.$.myElement.parentNode.removeChild(this.$.myElement);\r\n            }\r\n        });\r\n    </script>\r\n</dom-module>\r\n```\r\n\r\nindex.html\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"components/parent-element.html\">\r\n</head>\r\n<body>\r\n    <parent-element></parent-element>\r\n</body>\r\n<script>    \r\n</script>\r\n</html>\r\n```\r\n控制台输出结果\r\n![图片描述][1]\r\n\r\n这里我只是根据官网的文档描述，大概介绍了几个主要的生命周期，可能会有遗漏（诸如layout和render在什么阶段官网文档中并没有体现，或者说官方并没有提供这2二个阶段供的事件接口，供用户来hack一些组件的生成，当然这仅仅是我暂时的一些推测，待继续深入学习后会回过来一一补充。）。生命周期篇就讲到这里，下一篇我们来聊聊Polymer的事件，也就是大家比较关心的另外一个问题，组件之间的通讯（消息机制）\r\n\r\n  [1]: http://segmentfault.com//img/bVqerM', '2015-12-07 15:08:54', null, '1', '前沿技术', 'qyjs', null, '0');
INSERT INTO `article` VALUES ('11', '(7)开坑，写点Polymer 1.0 教程第5篇——事件与消息机制', 'article_1449472184745', '(7)开坑，写点Polymer 1.0 教程第5篇——事件与消息机制', '/upload/article/1449472184745.png', 'admin', '这篇会讲下组件内部的事件处理机制，以及组件和外界通讯的处理方式（父子通讯，兄弟通讯等）\r\n##组件内的事件处理机制##\r\n\r\n第一种，直接写在标签里，用on-eventName=“eventHandler”的方式\r\n\r\n```\r\n<link rel=\"import\" href=\"../bower_components/polymer/polymer.html\">\r\n<dom-module id=\"event-element\">\r\n    <template>\r\n        <button id=\"myBtn\" on-click=\"handleClick\">Alert</button>\r\n    </template>\r\n    <script>\r\n        Polymer({\r\n            is: \"event-element\",\r\n            handleClick: function(e){\r\n                alert(\"clicked by \"+ e.currentTarget.localName);\r\n            }\r\n        });\r\n    </script>\r\n</dom-module>\r\n```\r\n\r\n第二种使用EventListener的方式\r\n\r\n```\r\n<link rel=\"import\" href=\"../bower_components/polymer/polymer.html\">\r\n<dom-module id=\"event-element\">\r\n    <template>\r\n        <button id=\"myBtn\">Alert</button>\r\n    </template>\r\n    <script>\r\n        Polymer({\r\n            is: \"event-element\",\r\n            handleClick: function(e){\r\n                alert(\"clicked by \"+ e.currentTarget.localName);\r\n            },\r\n            listeners: {\r\n                \'click\': \'handleClick\',\r\n                \'myBtn.click\': \'handleClick\'\r\n            }\r\n        });\r\n    </script>\r\n</dom-module>\r\n```\r\n大家注意，这里使用了myBtn.click这种 id+.+eventName的方式，可以对内部某个id的dom进行监听。而不写id，则监听是加在整个组件之上的。大家可以跑下上面的代码看看区别。\r\n\r\n##组件对外触发一个事件##\r\n组件分装好了最终还是要被其它组件调用，与外界通讯的，如果把属性赋值作为 输入in， 那么事件就可以称为输出out了。就拿原生的input标签进行举例。 input组件的输入就是type属性赋值，输出则是onclick事件的触发。\r\n\r\n```\r\n<input type=“xxx” onclick=\"xxxx\">\r\n```\r\n同理，对于自定义组件也一样，对于输入来说前面几篇已经介绍了properties如何在组件外被赋值。那么事件的触发我们由如何来处理呢？\r\nPolymer给我们提供了一个fire的api让我们来触发自定义事件，来看下面的代码\r\n\r\n```\r\n<link rel=\"import\" href=\"../bower_components/polymer/polymer.html\">\r\n<dom-module id=\"event-element\">\r\n    <template>\r\n        <button id=\"myBtn\">Alert</button>\r\n    </template>\r\n    <script>\r\n        Polymer({\r\n            is: \"event-element\",\r\n            handleClick: function(e){\r\n                //第一个参数为eventname，第二个参数为传递的值\r\n                this.fire(\'kick\',{\'data\':\'transfer data\'});\r\n            },\r\n            listeners: {\r\n                \'myBtn.click\': \'handleClick\'\r\n            }\r\n        });\r\n    </script>\r\n</dom-module>\r\n```\r\n对自定义事件添加监听后就可以捕获到这个“kick”的自定义事件了。我尝试了直接在组件上使用on-kick进行监听却不行，非得使用addEventListener方式，可能是polymer不支持这种写法，期望在后续版本中加以改进。\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"components/event-element.html\">\r\n</head>\r\n\r\n<body>\r\n    <event-element id=\"eventElement\"></event-element>\r\n</body>\r\n<script>\r\n    HTMLImports.whenReady(function () {\r\n        var el = document.getElementById(\"eventElement\");\r\n        el.addEventListener(\"kick\", function (e) {\r\n            alert(e.detail.data);\r\n        });\r\n    });\r\n</script>\r\n</html>\r\n```\r\n运行结果\r\n![图片描述][1]\r\n\r\n##消息机制##\r\n这里来聊聊组件化开发的消息机制，这个并不局限于polymer或者web应用，适用于所有的组件式开发技术。其实归纳下来就是几条准则：\r\n\r\n父子通讯： \r\n    父->子 设置子的公共属性\r\n    子->父 子触发事件，父监听事件，父捕获到子发出的事件后再做后续处理。\r\n\r\n兄弟通讯：\r\n    兄->父 跟父子通讯一样，先通过事件把需求提交给父\r\n    父->弟 父拿到兄的需求后，统一调度，通过设属性的方式来访问弟\r\n爷孙通讯：\r\n    参照父子通讯，一层层向上传递事件，再一层层向下设置属性，实际开发时尽量将组建的接口都设计合理避免跨n级通讯的尴尬场面\r\n远亲通讯：\r\n    请使用前端消息总线（如单例的消息总线类）来解决这里剪不断理还乱的case，但是这类方式不宜大面积使用，父子，和兄弟间通讯还是请使用上面的几种方式。\r\n    \r\n  [1]: http://segmentfault.com//img/bVqfMQ', '2015-12-07 15:09:44', null, '1', '前沿技术', 'qyjs', null, '0');
INSERT INTO `article` VALUES ('12', '(8)开坑，写点Polymer 1.1 教程第6篇——样式(上)', 'article_1449472238878', '(8)开坑，写点Polymer 1.1 教程第6篇——样式(上)', '/upload/article/1449472238878.png', 'admin', '好久没有更新了，今天更一篇样式篇。\r\n\r\nPolyermer使用的是Shadow DOM styling规则来限定每个自定义组件的样式范围（即每个组件都可以定义自己内部独立的样式，而不受外界全局样式的干扰）。如何定义组件内部样式呢，我们需要在<dom-module>标签内使用<style>标签（1.1版本开始推荐与<template>平级）。\r\n\r\n我们来看个例子\r\n首先是自定义组件的代码\r\n```\r\n<link rel=\"import\" href=\"../bower_components/polymer/polymer.html\">\r\n<dom-module id=\"sub-element\">\r\n    <style>\r\n        :host {\r\n            display: block;\r\n            border: 1px solid red;\r\n        }\r\n        \r\n        #child-element {\r\n            background: yellow;\r\n        }\r\n        \r\n        .content-wrapper >::content .special {\r\n            background: silver;\r\n        }\r\n    </style>\r\n    <template>\r\n        <div id=\"child-element\">In local DOM!</div>\r\n        <div class=\"content-wrapper\">\r\n            <content></content>\r\n        </div>\r\n    </template>\r\n    <script>\r\n        Polymer({\r\n            is: \'sub-element\'\r\n        });\r\n    </script>\r\n</dom-module>\r\n```\r\n主index.html的代码\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <script src=\"bower_components/webcomponentsjs/webcomponents-lite.min.js\"></script>\r\n    <link rel=\"import\" href=\"components/sub-element.html\">\r\n    <style>\r\n        #child-element{\r\n            background: green;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div id=\"child-element\">native div of index page</div>\r\n    <sub-element id=\"subElement\">\r\n        <div class=\"special\">I\'m content child of sub element</div>    \r\n    </my-element>\r\n</body>\r\n</html>\r\n```\r\n运行结果如下：\r\n![图片描述][1]\r\n可以看到我们在主index.html里也定义了一个#child-element的全局样式，效果为背景绿色，但是这个我们在sub-element中的style设置里对这个样式进行了再次定义，所以最终渲染时会以自组建为先，覆盖父容器中的定义，或者是全局的样式定义。如果我们把sub-element中这个style注释掉，则子组件会使用外层的定义，显示为绿色。\r\n```\r\n#child-element {\r\n    /*background: yellow;*/\r\n}\r\n```\r\n![图片描述][2]\r\n我们接着看style中几个和以往传统写法不一样的地方, \r\n```\r\n:host {\r\n    display: block;\r\n    border: 1px solid red;\r\n}\r\n```\r\n**:host** 是对宿主子容器进行设定，你可以把它当成是<template></template>，或者是<sub-element></sub-element>\r\n```\r\n.content-wrapper >::content .special {\r\n    background: silver;\r\n}\r\n```\r\n**::content** 是对被插入的child标签进行设定，也就是途中灰色的<div class=\"special\">I\'m content child of sub element</div>\r\n```\r\n.content-wrapper >::content .special\r\n---->最终会被翻译成\r\n.content-wrapper >.special\r\n````\r\n为什么要让自定义组件的style有自己独立的作用域呢！道理其实请简单，我们开发一套系统一般都要定义全局一套主题，每个控件的样色设计风格要统一一致，但是一旦我对某些组件进行了扩展，需要一些特殊的样式设置，我们就可以在每个自定义组件内部进行设置，而不需要破坏全局的css文件。\r\nPolymer team现在觉得::content的写法有些冗长，会在后续版本中加以改进，我们也拭目以待\r\n\r\n\r\n\r\n  [1]: http://segmentfault.com//img/bVqC1k\r\n  [2]: http://segmentfault.com//img/bVqC19', '2015-12-07 15:10:38', '2015-12-07 16:56:10', '1', '前沿技术', 'qyjs', null, '0');
INSERT INTO `article` VALUES ('13', 'CSS编码规范', 'article_1449475373614', 'CSS编码规范', '/upload/article/1449477860288.jpg', 'admin', '|*Subject	2014-前端CSS编码规范 Doc.:	S11	*|*Rev.  	V0.1*|\r\n| ------------: | :------------: |\r\n|Release Date:	2015-12-07|Revision Status:|\r\n| ||\r\n| ||\r\n| ||\r\n| ||\r\n| ||\r\n| ||\r\n| ||\r\n| ||\r\n| |||\r\n\r\n|Approved By:	|Reviewed By:|	Prepared By:|\r\n| ------------ | ------------ |\r\n|PM Head / |	SD /|	PM /|\r\n||	QJ /	|||\r\n\r\n\r\n# 历史版本\r\n|Date	|Author	|Version	|Comment|\r\n| ------------ | ------------ |\r\n|2014-10-13|王勇|	0.1|创建\r\n\r\n# CSS编码规范\r\n## 目录\r\n###### CSS编码规范	1\r\n- 1 前言	2\r\n- 2 代码风格	2\r\n- 2.1 文件	2\r\n- 2.2 缩进	2\r\n- 2.3 空格	2\r\n- 2.4 行长度	3\r\n- 2.5 选择器	4\r\n- 2.6 属性	5\r\n- 3 通用	6\r\n- 3.1 选择器	6\r\n- 3.2 属性缩写	7\r\n- 3.3 属性书写顺序	8\r\n- 3.4 清除浮动	9\r\n- 3.5 !important	10\r\n- 3.6 z-index	10\r\n- 4 值与单位	11\r\n- 4.1 文本	11\r\n- 4.2 数值	12\r\n- 4.3 url()	12\r\n- 4.4 长度	12\r\n- 4.5 颜色	13\r\n- 4.6 2D 位置	14\r\n- 5 文本编排	15\r\n- 5.1 字体族	15\r\n- 5.2 字号	17\r\n- 5.3 字体风格	17\r\n- 5.4 字重	18\r\n- 5.5 行高	18\r\n- 6 变换与动画	19\r\n- 7 响应式	20\r\n- 8 兼容性	21\r\n- 8.1 属性前缀	21\r\n- 8.2 Hack	21\r\n- 8.3 Expression	23\r\n\r\n#### 1 前言\r\nCSS作为网页样式的描述语言，在web互联网一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。\r\n虽然本文档是针对CSS设计的，但是在使用各种CSS的预编译器(如less 、sass 、stylus 等)时，适用的部分也应尽量遵循本文档的约定。\r\n#### 2 代码风格\r\n##### 2.1 文件\r\n[建议] CSS 文件使用无 BOM 的 UTF-8 编码。\r\n解释：\r\nUTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。\r\n##### 2.2 缩进\r\n[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。\r\n示例：\r\n```css\r\n.selector {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n```\r\n##### 2.3 空格\r\n[强制] 选择器 与 { 之间必须包含空格。\r\n示例：\r\n```css\r\n.selector {\r\n}\r\n```\r\n[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。\r\n示例：\r\n```css\r\nmargin: 0;\r\n```\r\n[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。\r\n示例：\r\n```css\r\nfont-family: Arial, sans-serif;\r\n```\r\n##### 2.4 行长度\r\n[强制] 每行不得超过 120 个字符，除非单行不可分割。\r\n解释：\r\n常见不可分割的场景为URL超长。\r\n[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。\r\n示例：\r\n```css\r\n/* 不同属性值按逻辑分组 */\r\nbackground:\r\n    transparent url(aVeryVeryVeryLongUrlIsPlacedHere)\r\n    no-repeat 0 0;\r\n\r\n/* 可重复多次的属性，每次重复一行 */\r\nbackground-image:\r\n    url(aVeryVeryVeryLongUrlIsPlacedHere)\r\n    url(anotherVeryVeryVeryLongUrlIsPlacedHere);\r\n\r\n/* 类似函数的属性值可以根据函数调用的缩进进行 */\r\nbackground-image: -webkit-gradient(\r\n    linear,\r\n    left bottom,\r\n    left top,\r\n    color-stop(0.04, rgb(88,94,124)),\r\n    color-stop(0.52, rgb(115,123,162))\r\n);\r\n```\r\n##### 2.5 选择器\r\n[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。\r\n示例：\r\n```css\r\n/* good */\r\n.post,\r\n.page,\r\n.comment {\r\n    line-height: 1.5;\r\n}\r\n\r\n/* bad */\r\n.post, .page, .comment {\r\n    line-height: 1.5;\r\n}\r\n```\r\n[强制] >、+、~ 选择器的两边各保留一个空格。\r\n示例：\r\n```css\r\n/* good */\r\nmain > nav {\r\n    padding: 10px;\r\n}\r\n\r\nlabel + input {\r\n    margin-left: 5px;\r\n}\r\n\r\ninput:checked ~ button {\r\n    background-color: #69C;\r\n}\r\n\r\n/* bad */\r\nmain>nav {\r\n    padding: 10px;\r\n}\r\n\r\nlabel+input {\r\n    margin-left: 5px;\r\n}\r\n\r\ninput:checked~button {\r\n    background-color: #69C;\r\n}\r\n```\r\n[强制] 属性选择器中的值必须用双引号包围。\r\n解释：\r\n不允许使用单引号，不允许不使用引号。\r\n示例：\r\n```css\r\n/* good */\r\narticle[character=\"juliet\"] {\r\n    voice-family: \"Vivien Leigh\", victoria, female\r\n}\r\n\r\n/* bad */\r\narticle[character=\'juliet\'] {\r\n    voice-family: \"Vivien Leigh\", victoria, female\r\n}\r\n```\r\n##### 2.6 属性\r\n[强制] 属性定义必须另起一行。\r\n示例：\r\n```css\r\n/* good */\r\n.selector {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n/* bad */\r\n.selector { margin: 0; padding: 0; }\r\n[强制] 属性定义后必须以分号结尾。\r\n示例：\r\n/* good */\r\n.selector {\r\n    margin: 0;\r\n}\r\n\r\n/* bad */\r\n.selector {\r\n    margin: 0\r\n}\r\n```\r\n#### 3 通用\r\n##### 3.1 选择器\r\n[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。\r\n解释：\r\n在性能和维护性上，都有一定的影响。\r\n示例：\r\n```css\r\n/* good */\r\n#error,\r\n.danger-message {\r\n    font-color: #c00;\r\n}\r\n\r\n/* bad */\r\ndialog#error,\r\np.danger-message {\r\n    font-color: #c00;\r\n}\r\n```\r\n[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。\r\n示例：\r\n```css\r\n/* good */\r\n#username input {}\r\n.comment .avatar {}\r\n\r\n/* bad */\r\n.page .header .login #username input {}\r\n.comment div * {}\r\n##### 3.2 属性缩写\r\n[建议] 在可以使用缩写的情况下，尽量使用属性缩写。\r\n示例：\r\n```css\r\n/* good */\r\n.post {\r\n    font: 12px/1.5 arial, sans-serif;\r\n}\r\n\r\n/* bad */\r\n.post {\r\n    font-family: arial, sans-serif;\r\n    font-size: 12px;\r\n    line-height: 1.5;\r\n}\r\n```\r\n[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。\r\n解释：\r\nborder / margin / padding 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。\r\n示例：\r\n```css\r\n/* centering <article class=\"page\"> horizontally and highlight featured ones */\r\narticle {\r\n    margin: 5px;\r\n    border: 1px solid #999;\r\n}\r\n\r\n/* good */\r\n.page {\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n}\r\n\r\n.featured {\r\n    border-color: #69c;\r\n}\r\n\r\n/* bad */\r\n.page {\r\n    margin: 5px auto; /* introducing redundancy */\r\n}\r\n\r\n.featured {\r\n    border: 1px solid #69c; /* introducing redundancy */\r\n}\r\n```\r\n##### 3.3 属性书写顺序\r\n[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） > Box Model（尺寸） > Typographic（文本相关） > Visual（视觉效果） 的顺序书写，以提高代码的可读性。\r\n解释：\r\n•	Formatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等\r\n•	Box Model 相关属性包括：border / margin / padding / width / height 等\r\n•	Typographic 相关属性包括：font / line-height / text-align / word-wrap 等\r\n•	Visual 相关属性包括：background / color / transition / list-style 等\r\n另外，如果包含 content 属性，应放在最前面。\r\n示例：\r\n```css\r\n.sidebar {\r\n    /* formatting model: positioning schemes / offsets / z-indexes / display / ...  */\r\n    position: absolute;\r\n    top: 50px;\r\n    left: 0;\r\n    overflow-x: hidden;\r\n\r\n    /* box model: sizes / margins / paddings / borders / ...  */\r\n    width: 200px;\r\n    padding: 5px;\r\n    border: 1px solid #ddd;\r\n\r\n    /* typographic: font / aligns / text styles / ... */\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n\r\n    /* visual: colors / shadows / gradients / ... */\r\n    background: #f5f5f5;\r\n    color: #333;\r\n    -webkit-transition: color 1s;\r\n       -moz-transition: color 1s;\r\n            transition: color 1s;\r\n}\r\n```\r\n##### 3.4 清除浮动\r\n[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC的方式进行 clearfix。尽量不使用增加空标签的方式。\r\n解释：\r\n触发 BFC  的方式很多，常见的有：\r\n•	浮动元素（float: left | right）； \r\n•	绝对定位元素（position: absolute | fixed）；  行内块元素（display: inline-block）； \r\n•	表格的单元格（display: table-cells，TD、TH）；  表格的标题（display: table-captions，CAPTION）； \r\n•	 \'overflow\' 特性不为 visible 的元素（除非该值已经传播到viewport?）；  \r\n•	表格元素创建的 \"匿名框\"  \r\n•	注意，\"display:table\" 本身并不产生 \"block formatting contexts\"。但是，它可以产生匿名框 6， 其中包含 \"display:table-cell\" 的框会产生块格式化上下文。 总之，对于 \"display:table\" 的元素，产生块格式化上下文的是匿名框而不是 \"display:table\" \r\n•	注意，是这些元素创建了块格式化上下文，它们本身不是块格式化上下文。\r\n如希望使用更小副作用的清除浮动方法，参见 A new micro clearfix hack 一文。\r\n另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。\r\n##### 3.5 !important\r\n[建议] 尽量不使用 !important 声明。\r\n[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。\r\n解释：\r\n必须注意的是，仅在设计上 确实不允许任何其它场景覆盖样式 时，才使用内联的 !important 样式。通常在第三方环境的应用中使用这种方案。下面的 z-index 章节是其中一个特殊场景的典型样例。\r\n##### 3.6 z-index\r\n[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。\r\n解释：\r\n同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 z-index 或递增 z-index。\r\n建议每层包含100个 z-index 来容纳足够的元素，如果每层元素较多，可以调整这个数值。\r\n[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。\r\n解释：\r\n可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。\r\n不建议取值为 2147483647。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。\r\n[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647 。\r\n解释：\r\n第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。\r\n#### 4 值与单位\r\n##### 4.1 文本\r\n[强制] 文本内容必须用双引号包围。\r\n解释：\r\n文本类型的内容可能在选择器、属性值等内容中。\r\n示例：\r\n```css\r\n/* good */\r\nhtml[lang|=\"zh\"] q:before {\r\n    font-family: \"Microsoft YaHei\", sans-serif;\r\n    content: \"“\";\r\n}\r\n\r\nhtml[lang|=\"zh\"] q:after {\r\n    font-family: \"Microsoft YaHei\", sans-serif;\r\n    content: \"”\";\r\n}\r\n\r\n/* bad */\r\nhtml[lang|=zh] q:before {\r\n    font-family: \'Microsoft YaHei\', sans-serif;\r\n    content: \'“\';\r\n}\r\n\r\nhtml[lang|=zh] q:after {\r\n    font-family: \"Microsoft YaHei\", sans-serif;\r\n    content: \"”\";\r\n}\r\n```\r\n##### 4.2 数值\r\n[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。\r\n示例：\r\n```css\r\n/* good */\r\npanel {\r\n    opacity: .8\r\n}\r\n\r\n/* bad */\r\npanel {\r\n    opacity: 0.8\r\n}\r\n```\r\n##### 4.3 url()\r\n[强制] url() 函数中的路径不加引号。\r\n示例：\r\n```css\r\nbody {\r\n    background: url(bg.png);\r\n}\r\n```\r\n[建议] url() 函数中的绝对路径可省去协议名。\r\n示例：\r\n```css\r\nbody {\r\n    background: url(//baidu.com/img/bg.png) no-repeat 0 0;\r\n}\r\n```\r\n##### 4.4 长度\r\n[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)\r\n示例：\r\n```css\r\n/* good */\r\nbody {\r\n    padding: 0 5px;\r\n}\r\n\r\n/* bad */\r\nbody {\r\n    padding: 0px 5px;\r\n}\r\n```\r\n##### 4.5 颜色\r\n[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。\r\n解释：\r\n带有alpha的颜色信息可以使用 rgba()。使用 rgba() 时每个逗号后必须保留一个空格。\r\n示例：\r\n```css\r\n/* good */\r\n.success {\r\n    box-shadow: 0 0 2px rgba(0, 128, 0, .3);\r\n    border-color: #008000;\r\n}\r\n\r\n/* bad */\r\n.success {\r\n    box-shadow: 0 0 2px rgba(0,128,0,.3);\r\n    border-color: rgb(0, 128, 0);\r\n}\r\n```\r\n[强制] 颜色值可以缩写时，必须使用缩写形式。\r\n示例：\r\n```css\r\n/* good */\r\n.success {\r\n    background-color: #aca;\r\n}\r\n\r\n/* bad */\r\n.success {\r\n    background-color: #aaccaa;\r\n}\r\n```\r\n[强制] 颜色值不允许使用命名色值。\r\n示例：\r\n```css\r\n/* good */\r\n.success {\r\n    color: #90ee90;\r\n}\r\n\r\n/* bad */\r\n.success {\r\n    color: lightgreen;\r\n}\r\n```\r\n[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。\r\n示例：\r\n```css\r\n/* good */\r\n.success {\r\n    background-color: #aca;\r\n    color: #90ee90;\r\n}\r\n\r\n/* good */\r\n.success {\r\n    background-color: #ACA;\r\n    color: #90EE90;\r\n}\r\n\r\n/* bad */\r\n.success {\r\n    background-color: #ACA;\r\n    color: #90ee90;\r\n}\r\n```\r\n##### 4.6 2D 位置\r\n[强制] 必须同时给出水平和垂直方向的位置。\r\n解释：\r\n2D 位置初始值为 0% 0%，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。background-position属性值的定义\r\n示例：\r\n```css\r\n/* good */\r\nbody {\r\n    background-position: center top; /* 50% 0% */\r\n}\r\n\r\n/* bad */\r\nbody {\r\n    background-position: top; /* 50% 0% */\r\n}\r\n```\r\n#### 5 文本编排\r\n##### 5.1 字体族\r\n[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。\r\n解释：\r\n所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：\r\n字体	操作系统	Family Name\r\n宋体 (中易宋体)	Windows	SimSun\r\n黑体 (中易黑体)	Windows	SimHei\r\n微软雅黑	Windows	Microsoft YaHei\r\n微软正黑	Windows	Microsoft JhengHei\r\n华文黑体	Mac/iOS	STHeiti\r\n冬青黑体	Mac/iOS	Hiragino Sans GB\r\n文泉驿正黑	Linux	WenQuanYi Zen Hei\r\n文泉驿微米黑	Linux	WenQuanYi Micro Hei\r\n示例：\r\n```css\r\nh1 {\r\n    font-family: \"Microsoft YaHei\";\r\n}\r\n```\r\n[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif/ sans-serif )。\r\n解释：\r\n更详细说明可参考本文。\r\n示例：\r\n```css\r\n/* Display according to platform */\r\n.article {\r\n    font-family: Arial, sans-serif;\r\n}\r\n\r\n/* Specific for most platforms */\r\nh1 {\r\n    font-family: \"Helvetica Neue\", Arial, \"Hiragino Sans GB\", \"WenQuanYi Micro Hei\", \"Microsoft YaHei\", sans-serif;\r\n}\r\n```\r\n[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。\r\n示例：\r\n```css\r\n/* good */\r\nbody {\r\n    font-family: Arial, sans-serif;\r\n}\r\n\r\nh1 {\r\n    font-family: Arial, \"Microsoft YaHei\", sans-serif;\r\n}\r\n\r\n/* bad */\r\nbody {\r\n    font-family: arial, sans-serif;\r\n}\r\n\r\nh1 {\r\n    font-family: Arial, \"Microsoft YaHei\", sans-serif;\r\n}\r\n```\r\n##### 5.2 字号\r\n[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。\r\n解释：\r\n由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。\r\n##### 5.3 字体风格\r\n[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。\r\n解释：\r\n由于中文字体没有 italic 风格的实现，所有浏览器下都会 fallback 到 obilique 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。\r\n##### 5.4 字重\r\n[强制] font-weight 属性必须使用数值方式描述。\r\n解释：\r\nCSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 400 和 700 两档，分别等价于关键词 normal 和 bold。\r\n浏览器本身使用一系列启发式规则来进行匹配，在 =700 时匹配 Bold 字重。\r\n但已有浏览器开始支持 =600 时匹配 Semibold 字重 (见此表)，故使用数值描述增加了灵活性，也更简短。\r\n示例：\r\n```css\r\n/* good */\r\nh1 {\r\n    font-weight: 700;\r\n}\r\n\r\n/* bad */\r\nh1 {\r\n    font-weight: bold;\r\n}\r\n```\r\n##### 5.5 行高\r\n[建议] line-height 在定义文本段落时，应使用数值。\r\n解释：\r\n将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。\r\n当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。\r\n示例：\r\n```css\r\n.container {\r\n    line-height: 1.5;\r\n}\r\n#### 6 变换与动画\r\n[强制] 使用 transition 时应指定 transition-property。\r\n示例：\r\n/* good */\r\n.box {\r\n    transition: color 1s, border-color 1s;\r\n}\r\n\r\n/* bad */\r\n.box {\r\n    transition: all 1s;\r\n}\r\n```\r\n[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。\r\n解释：\r\n见本文，在可能的情况下应选择这样四种变换：\r\n•	transform: translate(npx, npx);\r\n•	transform: scale(n);\r\n•	transform: rotate(ndeg);\r\n•	opacity: 0..1;\r\n典型的，可以使用 translate 来代替 left 作为动画属性。\r\n示例：\r\n```css\r\n/* good */\r\n.box {\r\n    transition: transform 1s;\r\n}\r\n.box:hover {\r\n    transform: translate(20px); /* move right for 20px */\r\n}\r\n\r\n/* bad */\r\n.box {\r\n    left: 0;\r\n    transition: left 1s;\r\n}\r\n.box:hover {\r\n    left: 20px; /* move right for 20px */\r\n}\r\n```\r\n#### 7 响应式\r\n[强制] Media Query 不得单独编排，必须与相关的规则一起定义。\r\n示例：\r\n```css\r\n/* Good */\r\n/* header styles */\r\n@media (...) {\r\n    /* header styles */\r\n}\r\n\r\n/* main styles */\r\n@media (...) {\r\n    /* main styles */\r\n}\r\n\r\n/* footer styles */\r\n@media (...) {\r\n    /* footer styles */\r\n}\r\n\r\n\r\n/* Bad */\r\n/* header styles */\r\n/* main styles */\r\n/* footer styles */\r\n\r\n@media (...) {\r\n    /* header styles */\r\n    /* main styles */\r\n    /* footer styles */\r\n}\r\n```\r\n[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。\r\n示例：\r\n```css\r\n@media\r\n(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */\r\n(min--moz-device-pixel-ratio: 2),    /* Older Firefox browsers (prior to Firefox 16) */\r\n(min-resolution: 2dppx),             /* The standard way */\r\n(min-resolution: 192dpi) {           /* dppx fallback */\r\n    /* Retina-specific stuff here */\r\n}\r\n```\r\n[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。\r\n#### 8 兼容性\r\n##### 8.1 属性前缀\r\n[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。\r\n解释：\r\n标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。\r\n示例：\r\n```css\r\n.box {\r\n    -webkit-box-sizing: border-box;\r\n       -moz-box-sizing: border-box;\r\n            box-sizing: border-box;\r\n}\r\n```\r\n##### 8.2 Hack\r\n[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。\r\n解释：\r\n如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。\r\n[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。\r\n解释：\r\n尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。\r\n示例：\r\n```css\r\n/* IE 7 */\r\n*:first-child + html #header {\r\n    margin-top: 3px;\r\n    padding: 5px;\r\n}\r\n\r\n/* IE 6 */\r\n* html #header {\r\n    margin-top: 5px;\r\n    padding: 4px;\r\n}\r\n```\r\n[建议] 尽量使用简单的 属性 hack。\r\n示例：\r\n```css\r\n.box {\r\n    _display: inline; /* fix double margin */\r\n    float: left;\r\n    margin-left: 20px;\r\n}\r\n\r\n.container {\r\n    overflow: hidden;\r\n    *zoom: 1; /* triggering hasLayout */\r\n}\r\n```\r\n##### 8.3 Expression\r\n[强制] 禁止使用 Expression。\r\n\r\n', '2015-12-07 16:02:53', '2015-12-07 16:44:20', '1', '代码规范', 'dmgf', null, '0');
INSERT INTO `article` VALUES ('14', '测试小二第一天的工作', 'article_1450166665909', '测试小二第一天的工作', '', '测试小二', '测试小二第一天的工作 不会是被放鸽子吧', '2015-12-15 16:02:55', '2015-12-15 16:04:14', '2', '性能优化', 'xnyh', null, '0');
INSERT INTO `article` VALUES ('15', '测试大白的杰作', 'article_1450167546214', '测试大白的杰作', '/upload/article/1450167546214.jpg', '测试大白', '测试大白的杰作画了一只大考拉！', '2015-12-15 16:17:36', null, '2', '性能优化', 'xnyh', null, '0');

-- ----------------------------
-- Table structure for `category`
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '自增加主键',
  `categoryName` varchar(50) NOT NULL COMMENT '分类名称',
  `categoryCode` varchar(10) NOT NULL COMMENT '分类代码',
  `isDelete` int(11) DEFAULT '0' COMMENT '是否删除标志   0为未删除  1为已删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COMMENT='分类表  前端页分类表';

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES ('1', '性能优化', 'xnyh', '0');
INSERT INTO `category` VALUES ('2', '代码规范', 'dmgf', '0');
INSERT INTO `category` VALUES ('3', '前沿技术', 'qyjs', '0');
INSERT INTO `category` VALUES ('4', '前后端分离', 'qhdfl', '0');
INSERT INTO `category` VALUES ('6', '测试分类', 'rwqeqwe', '0');
INSERT INTO `category` VALUES ('7', '交互设计', 'jhsj', '0');
INSERT INTO `category` VALUES ('8', '111', '1122', '1');
INSERT INTO `category` VALUES ('9', '编码技术', 'bmjs', '0');

-- ----------------------------
-- Table structure for `comment`
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` text COMMENT '评论内容',
  `createTime` datetime DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime DEFAULT NULL COMMENT '更新时间',
  `nickName` varchar(30) DEFAULT NULL COMMENT '昵称',
  `email` varchar(30) DEFAULT NULL COMMENT '邮箱',
  `articleId` int(11) DEFAULT NULL COMMENT '评论文章ID',
  `commentId` int(11) DEFAULT NULL COMMENT '评论的ID',
  `userId` int(11) DEFAULT NULL COMMENT '用户ID',
  `replyTo` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=66 DEFAULT CHARSET=utf8 COMMENT='评论表';

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('46', 'test content', null, null, 'test nickname', 'test@163.com', '148', null, null, null);
INSERT INTO `comment` VALUES ('57', '111', null, null, 'momoko', 'momoko@163.com', '2', null, null, null);
INSERT INTO `comment` VALUES ('58', '不错', '2015-12-07 16:51:16', null, 'eric', 'wangyong31893189@aliyun.com', '13', null, null, null);
INSERT INTO `comment` VALUES ('59', '不错', '2015-12-07 16:51:18', null, 'eric', 'wangyong31893189@aliyun.com', '13', null, null, null);
INSERT INTO `comment` VALUES ('60', '不错', '2015-12-07 16:51:18', null, 'eric', 'wangyong31893189@aliyun.com', '13', null, null, null);
INSERT INTO `comment` VALUES ('61', '不错', '2015-12-07 16:51:18', null, 'eric', 'wangyong31893189@aliyun.com', '13', null, null, null);
INSERT INTO `comment` VALUES ('62', '不错', '2015-12-07 16:51:34', null, 'eric', 'wangyong31893189@aliyun.com', '13', null, null, null);
INSERT INTO `comment` VALUES ('63', '不错', '2015-12-07 16:51:35', null, 'eric', 'wangyong31893189@aliyun.com', '13', null, null, null);
INSERT INTO `comment` VALUES ('64', '顶啊', '2015-12-07 16:52:36', null, 'hbzheng', 'momoko8443@163.com', '1', null, null, null);
INSERT INTO `comment` VALUES ('65', '12313123', '2015-12-07 16:55:28', null, 'eric', 'wangyong31893189@aliyun.com', '13', null, null, null);

-- ----------------------------
-- Table structure for `comment_plugins`
-- ----------------------------
DROP TABLE IF EXISTS `comment_plugins`;
CREATE TABLE `comment_plugins` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` text COMMENT '评论内容',
  `createTime` datetime DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime DEFAULT NULL COMMENT '更新时间',
  `nickName` varchar(30) DEFAULT NULL COMMENT '昵称',
  `email` varchar(30) DEFAULT NULL COMMENT '邮箱',
  `pluginId` int(11) DEFAULT NULL COMMENT '评论插件ID',
  `commentId` int(11) DEFAULT NULL COMMENT '评论的ID',
  `userId` int(11) DEFAULT NULL COMMENT '用户ID',
  `replyTo` varchar(30) DEFAULT NULL,
  `isDelete` int(11) DEFAULT NULL COMMENT '删除状态  0为正常  1为已删除',
  `status` int(11) DEFAULT NULL COMMENT '审核状态  0为未审核  1为已审核  2为审核未通过',
  `website` varchar(200) DEFAULT NULL COMMENT '博客地址',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='评论表';

-- ----------------------------
-- Records of comment_plugins
-- ----------------------------
INSERT INTO `comment_plugins` VALUES ('1', '前端数据模拟工具！', '2015-11-30 09:59:34', '2015-11-30 09:59:34', 'eric', '1034850788@qq.com', '2', null, null, null, '0', '0', null);
INSERT INTO `comment_plugins` VALUES ('2', '23123123112312', '2015-12-17 16:59:44', '2015-12-17 16:59:44', '管理员', '12@111.com', '3', null, '1', null, '0', '0', null);
INSERT INTO `comment_plugins` VALUES ('3', 'sdafafsdafsdafasd', '2015-12-17 16:59:50', '2015-12-17 16:59:50', '管理员', '12@111.com', '3', '2', '1', null, '0', '0', null);
INSERT INTO `comment_plugins` VALUES ('4', '23123123112312asdfasdf', '2015-12-17 16:59:56', '2015-12-17 16:59:56', '管理员', '12@111.com', '3', null, '1', null, '0', '0', null);
INSERT INTO `comment_plugins` VALUES ('5', 'sadfasfasdf', '2015-12-17 16:59:59', '2015-12-17 16:59:59', '管理员', '12@111.com', '3', '4', '1', null, '0', '0', null);
INSERT INTO `comment_plugins` VALUES ('6', 'sadfasfasdf', '2015-12-17 17:00:04', '2015-12-17 17:00:04', '管理员', '12@111.com', '3', '4', '1', null, '0', '0', null);

-- ----------------------------
-- Table structure for `log`
-- ----------------------------
DROP TABLE IF EXISTS `log`;
CREATE TABLE `log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `desc` varchar(500) DEFAULT NULL COMMENT '操作详情',
  `createTime` datetime DEFAULT NULL COMMENT '创建时间',
  `operator` varchar(30) DEFAULT NULL COMMENT '操作者',
  `userId` int(11) DEFAULT NULL COMMENT '操作者ID',
  `title` varchar(255) DEFAULT NULL COMMENT '操作主题',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of log
-- ----------------------------

-- ----------------------------
-- Table structure for `plugins`
-- ----------------------------
DROP TABLE IF EXISTS `plugins`;
CREATE TABLE `plugins` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '表字段ID',
  `title` varchar(30) DEFAULT NULL COMMENT '插件标题',
  `content` text COMMENT '插件内容',
  `createTime` datetime DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime DEFAULT NULL COMMENT '更新时间',
  `author` varchar(30) DEFAULT NULL COMMENT '插件作者',
  `status` int(11) DEFAULT '0' COMMENT '插件状态   0为未审核   1为已审核   2为未通过',
  `isDelete` int(11) DEFAULT '0' COMMENT '删除状态   不做物理删除   0为正常  1为已删除',
  `demoUrl` varchar(200) DEFAULT NULL COMMENT '示例地址',
  `gitUrl` varchar(200) DEFAULT NULL COMMENT 'git地址',
  `tags` varchar(100) DEFAULT NULL COMMENT '标签 以,号分隔，最多可为5个',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of plugins
-- ----------------------------
INSERT INTO `plugins` VALUES ('1', '大白222223333', '![](/upload/img/0.8018694634083658.jpg)背景\r\n\r\n相信使用 Node.js 开发过 Web 应用的同学一定苦恼过新修改的代码必须要重启 Node.js 进程后才能更新的问题。习惯使用 PHP 开发的同学更会非常的不适用，大呼果然还是我大PHP才是世界上最好的编程语言。手动重启进程不仅仅是非常恼人的重复劳动，当应用规模稍大以后，启动时间也逐渐开始不容忽视。\r\n\r\n当然作为程序猿，无论使用哪种语言，都不会让这样的事情折磨自己。解决这类问题最直接和普适的手段就是监听文件修改并重启进程。这个方法也已经有很多成熟的解决方案提供了，比如已经被弃坑的 node-supervisor，以及现在比较火的 PM2 ，或者比较轻量级的 node-dev 等等均是这样的思路。\r\n\r\n本文则提供了另外一种思路，只需要很小的改造，就可以实现真正的0重启热更新代码，解决 Node.js 开发 Web 应用时恼人的代码更新问题。\r\n\r\n总体思路\r\n\r\n说起代码热更新，当下最有名的当属 Erlang 语言的热更新功能，这门语言的特色在于高并发和分布式编程，主要的应用场景则是类似证券交易、游戏服务端等领域。这些场景都或多或少要求服务拥有在运行中运维的手段，而代码热更新就是其中非常重要的一环，因此我们可以先简单的了解一下 Erlang 的做法。\r\n\r\n由于我也没有使用过 Erlang ，以下内容均为道听途说，如果希望深入和准确的了解 Erlang 的代码热更新实现，最好还是查阅官方文档。\r\n\r\nErlang 的代码加载由一个名为code_server的模块管理，除了启动时的一些必要代码外，大部分的代码均是由code_server加载。\r\n当code_server发现模块代码被更新后，会重新加载模块，此后的新请求会使用新模块执行，而原有还在执行的请求则继续使用老模块执行。\r\n老模块会在新模块加载后，被打上old标签，新模块则是current标签。当下一次热更新的时候，Erlang 会扫描还在执行老模块的进行并杀掉，再继续按照这个逻辑更新模块。\r\nErlang 中并非所有代码均允许热更新，如 kernel, stdlib, compiler 等基础模块默认是不允许更新的\r\n我们可以发现 Node.js 中也有与code_server类似的模块，即 require 体系，因此 Erlang 的做法应该也可以在 Node.js 上做一些尝试。通过了解 Erlang 的做法，我们可以大概的总结出在 Node.js 中解决代码热更新的关键问题点\r\n\r\n如何更新模块代码\r\n\r\n如何使用新模块处理请求\r\n如何释放老模块的资源\r\n那么接下来我们就逐个的解析这些问题点。\r\n如何更新模块代码', null, null, '大白', '2', '0', '', '', '大白,大白,大白这是,大白');
INSERT INTO `plugins` VALUES ('2', '前端数据模拟工具-JOJO', '# 前端数据模拟工具V1.0(JOJO)\r\n## 一、什么是JOJO\r\nJOJO是一个简单的数据模拟服务器，可以模拟前端页面与后端数据交互的模拟，类似于MOCO，JOJO本身的开发灵感来自于MOCO框架，个人认为MOCO配置相对复杂，需要了解的东西比较多，现在基于MOCO的demo也比较少，而且不支持JSONP的形式！(我所需要的是对应的一个URI我能模拟一个我想要的响应数据这就满足我的要求了)这个基于Java开发的开源项目(支持桌面应用，支持配置文件路径切换和端口切换)! \r\n## 二、为什么要开发这个工具！\r\n集成，尤其是基于 HTTP 协议的集成——web service、REST 等，在我们的项目开发中被广泛应用。以前，我们每次都要往 Jetty ，JBOSS或 Tomcat 等应用服务器上部署一个新的 WAR。大家都知道，开发部署一个 WAR 的过程是很枯燥的，即使在嵌入式服务器上也是如此。而且，每次我们做一点改动，整个 WAR 都要重新组装。JOJO的出现，正是为了解决这些问题。开发团队只要根据自己的需要进行相应的配置，就会很方便得到一个模拟服务器。而且，由于 JOJO本身的灵活性，其用途已经不再局限于最初的集成测试，比如JOJO可以用于前端开发，JOJO 还可以用于移动开发，模拟尚未开发的服务；以及应用接入数据的模拟！模拟一个完整的 Web 服务器，等等！（对于前端开发的话，可能不需要有web容器的支持，由UED提供简单的DEMO文件夹，再通过接入后端服务将后端数据展示出最终渲染页面,从中就会遇到一些跨域的问题！如果纯粹只是为了这样一个目的解决跨域，因为MOCO中无法提供的JSONP支持，所以也就引燃了开发这个模拟工具的导火线!）\r\n\r\n## 三、为什么叫工具而不是框架\r\n个人认为只是一个工具！是不是框架不作讨论！\r\n\r\n## 四、JOJO这个工具的使用\r\n\r\n#### 桌面版\r\n适用于windows系统（经测试）\r\n1、先安装好jdk!\r\n2、启动服务界面：\r\n直接双击启动或者命令行输入java -jar SimulateDataTool.jar 会出现如下界面：\r\n1. 工具启动界面\r\n ![](/upload/img/0.679329366190359.png)\r\n1. 服务监听启动界面\r\n ![](/upload/img/0.2842637945432216.png)\r\n1. 服务监听停止界面\r\n ![](/upload/img/0.3222484621219337.png)\r\n#####工具说明\r\n1、Config folder path:配置文件存放路径，默认为SimulateDataTool.jar所在文件夹位置！\r\n2、Select Folder:选择配置文件存放路径！\r\n3、Server IP…:服务器IP地址：配置必须为所在机器的IP或者为127.0.0.1，默认为127.0.0.1！\r\n4、Server Port:服务器端口号！为未使用的端口号，默认为8888\r\n5、Start Service:启动web监听服务\r\n6、Stop Service:停止web监听服务\r\n\r\n#### 命令行版：\r\n适用于windows系统和unix系统（经测试）\r\n1、	安装好jdk!\r\n2、	启动服务：\r\n命令行输入java -jar SimulateDataTool.jar 127.0.0.1 8888 ,参数为必填项！参数1为监听服务器IP地址，参数2为监听服务器端口号\r\n3、	服务启动成功界面\r\n ![](/upload/img/0.9771890451665968.png)\r\n#### 配置文件的编写\r\n1、	以Hello World 为例（对于程序员举例亘古不变的名词）\r\n（1）、配置文件名称以.json结尾，服务启动的时候程序会扫描对应配置文件路径下的所有匹配*.json格式的文件，读取相关配置！\r\n（2）、最基本的参数变量，格式以json格式提供：如：\r\n```json\r\n{\r\n\"request\":{   //request参数：请求配置参数\r\n	\"method\":\"get\",//请求方式  目前支持get  post  默认为get \r\n	\"type\":\"json\",//请求类型 json（jsonp）  text  html  当请求为json或者jsonp的时候response返回的内容为｛“key”:“value”｝json格式,其中当为jsonp的时候会根据传入的hpjsonpcall或者jsonpcallback两个参数的存在于否生成jsonp对应的函数类似于jsonpcallback({“key”:”value”}); 当请求为text的时候response对应输出的是字符串，如”response”:”<h1>Hello World</h1>”  则最终web请求生成的页面内容为“<h1> Hello World</h1>”经过转义的内容; 当请求为html的时候response对应输出的是字符串，如”response”:”<h1>Hello World</h1>”  则最终web请求生成的页面内容为原样输出“<h1>Hello World</h1>”;若此type参数不作配置，则输出也为html! 默认为html\r\n	\"uri\":\"/mobile/mobileOrder.do\",//需要拦截响应的uri请求\r\n	\"params\":{\"param1\":\"paramValue2\",\"param2\":\"paramValue2\"…} //request请求的参数，暂时对配置请求参数各web请求参数名称进行匹配,暂时不对参数值进行检验，如果名称不匹配则输出错误提示！默认为无参数\r\n},\r\n\"response\":””||{//response响应参数  由request中的type请求类型决定输出\r\n	\"status\":\"success\",//success 成功 ,fail 失败 ,login  需要登录  三种状态为标准定义，也可以由需求扩展定义，可以自由发挥\r\n	\"msg\":\"Hello World\",  //成功或者失败返回的消息\r\n	\"data\":{} //其它需要返回的对象   \r\n…}\r\n}\r\n```\r\n\r\n<1>、Demo1 最简配置\r\n```json\r\n{\"request\":{\r\n	\"uri\":\"/mobile/index.do\"\r\n},\r\n\"response\":\"Hello World\"\r\n}\r\n<2>、Demo2 模拟手机充值返回订单信息\r\n{\"request\":{\r\n “method”:”post”,\r\n	\"uri\":\"/mobile/index.do\",\r\n “params”:{“mobile”:”13816085314”,”confirm”:”13816085314”,”value”:”50.00”},\r\n“type”:”json”\r\n},\r\n\"response\":{“status”:”success”,\r\n”msg”:”订单信息获取成功！”,\r\n”order”:{“orderId”:”111”,”orderDate”:”20140815104622”,”value”:”50”…}\r\n“backends”:{“backendcode”:”ccb”,”backendName”:”建行支付方式”}\r\n}\r\n}\r\n```\r\n\r\n#### 访问WEB服务\r\nhttp://127.0.0.1:8888/mobile/mobileOrder.do?mobile=13816085314\r\n协议://IP地址:商品号/uri?params\r\n通过访问不同的URI得到不同的response结果\r\n如：\r\nType为text\r\n![](/upload/img/0.7902734975796193.png)\r\nType为json\r\n![](/upload/img/0.7998723676428199.png)\r\nType为jsonp\r\n![](/upload/img/0.7963971146382391.png)\r\nType为html\r\n![](/upload/img/0.072592280106619.png)\r\n参数名称未匹配\r\n![](/upload/img/0.9457626659423113.png)\r\n#### Ngnix配置,模拟真实环境以及https的配置\r\n在ngnix配置文件中增加配置：\r\n1、增加模拟数据服务器的监听配置：\r\n\r\n    upstream simulateData{\r\n          server 127.0.0.1:8888;\r\n    }\r\n\r\n![](/upload/img/0.9827033670153469.png)\r\n2、	在80端口监听配置处增加对应应用的访问配置，模拟真实环境数据返回\r\n![](/upload/img/0.27867501974105835.png)\r\nNgnix配置之后流程模拟\r\n![](/upload/img/0.7132582471240312.png)\r\n![](/upload/img/0.09741458273492754.png)\r\n![](/upload/img/0.5365678337402642.png)\r\n![](/upload/img/0.2046618559397757.png)\r\n##### https的配置\r\nngnix中https 走443端口：\r\n![](/upload/img/0.002967048203572631.png)\r\n![](/upload/img/0.42881672317162156.png)\r\nNgnix配置之后的参数不匹配错误\r\n![](/upload/img/0.3097201355267316.png)\r\n', null, null, '王勇', '1', '0', '', 'https://github.com/wangyong31893189/hpSimulateDataTool', '数据模拟,前端,ajax,前后端分离,java');
INSERT INTO `plugins` VALUES ('3', '轻量级的双向绑定工具 —— ukulelejs', '# 什么是Ukulelejs\r\n一个轻量级的双向绑定工具，你可以把它暂时理解为精简版的Angular。(以下简称ukujs)\r\n注：最新版的ukujs已经加入了webcomponents的一些基本实现\r\n## 先来看一个最简单的双向绑定例子\r\n```html\r\n<div uku-application>\r\n    <input type=\"text\" uku-value=\"myCtrl.message\">\r\n    <input type=\"text\" uku-value=\"myCtrl.message\">\r\n	<textarea rows=\"4\" uku-value=\"myCtrl.message\"/>\r\n</div>\r\n```\r\n```javascript\r\nvar uku = new Ukulele();\r\nuku.registerController(\"myCtrl\",new MyController());\r\n```\r\n```javascript\r\nfunction MyController(){\r\n    this.hello = \"hello, ukulele\";\r\n}\r\n```\r\n[![](http://segmentfault.com/img/bVqs7K)](http://segmentfault.com/img/bVqs7K)\r\n#什么是Ukulele\r\n![](/upload/img/0.7960061370395124.png)\r\n还记得这个风靡网络的视频么？这个小正太手里捧着的可爱乐器就叫做Ukulele\r\n> Ukulele是一种来自于夏威夷的4弦小吉他，念作尤克里里（台译：乌克里里）\r\n\r\n## 既然已经有了Angularjs,为何还要再去造个轮子\r\n![](/upload/img/0.9766789462883025.jpg)\r\n![](/upload/img/0.5666678594425321.png)\r\nUkujs的诞生就是为了解决这些问题。\r\n\r\n# 安装 UkuleleJS\r\n```\r\n$npm install -g bower\r\nbower install ukulelejs#pure\r\n```\r\n# 让我们开始\r\n## 原生方式\r\n**Import ukulelejs\'s library**\r\n```html\r\n<head>\r\n	...\r\n	<script type=\"text/javascript\" src=\"ukulelejs/dist/ukulele.min.js\"></script>\r\n	...\r\n<head/>\r\n```\r\n\r\n**将 \'uku-application\' 作为一个属性添加到任意一个html的标签中, 之后ukujs就会托管这个html标签**\r\n\r\n```html\r\n<body uku-application>\r\n	...\r\n</body>\r\n```\r\n初始化 ukulelejs 并且 注册 Controller\r\n```javascript\r\n...\r\n</body>\r\n<script>\r\n...\r\nvar uku = new Ukulele();\r\nuku.registerController(\"myCtrl\", new MyController());\r\nuku.init();\r\n\r\nfunction MyController() {\r\n	this.message = \"\";\r\n	....\r\n}\r\n</script>\r\n```\r\n**绑定模型与html标签的属性, 你只需要添加 \'uku-\' + 在属性名的前面即可, 使用 {{}} 以文本形式显示属性的值 **\r\n```html\r\n<body uku-application>\r\n	...\r\n	<input type=\"text\" uku-value=\"myCtrl.message\">\r\n	<h3>{{myCtrl.message}}<h3/>\r\n	...\r\n</body>	\r\n```\r\n\r\n***\r\n## AMD 方式\r\n**RequireJS\'s configuration**\r\n```javascript\r\nrequire.config({\r\n    paths: {\r\n	\"domReady\": \'bower_components/domReady/domReady\',\r\n        \"ukulele\": \'build/js/ukulele\'\r\n    },\r\n    shim:{  	\r\n		\"ukulele\":{\r\n			exports:\"Ukulele\"\r\n		}\r\n    }\r\n});\r\n```\r\n**将 \'uku-application\' 作为一个属性添加到任意一个html的标签中, 之后ukujs就会托管这个html标签**\r\n```html\r\n<body uku-application>\r\n	...\r\n</body>\r\n```\r\n**在 domReady 的回调函数中注册ukulelejs并注册controller**\r\n```javascript\r\nrequire([\"domReady\",\"ukulele\",\"MyController\"], function(domReady,Ukulele,MyController) {\r\n	var uku;\r\n	domReady(function() {\r\n		uku = new Ukulele();\r\n		uku.registerController(\"myCtrl\", new MyController(uku));\r\n		uku.init();\r\n	});\r\n\r\n});\r\ndefine(\"MyController\",function(){\r\n	return function() {\r\n		this.message = \"\";\r\n		...\r\n	};\r\n});\r\n```\r\n**绑定模型与html标签的属性, 你只需要添加 \'uku-\' + 在属性名的前面即可, 使用 {{}} 以文本形式显示属性的值 **\r\n```html\r\n<body uku-application>\r\n	...\r\n	<input type=\"text\" uku-value=\"myCtrl.message\">\r\n	<h3>{{myCtrl.message}}<h3/>\r\n	...\r\n</body>\r\n```\r\n\r\n***\r\n### 更多的使用方式和API请查看 [http://ukujs.tiger.mopaasapp.com/](http://ukujs.tiger.mopaasapp.com/)', null, null, '郑会宾', '1', '0', 'http://ukujstore.tiger.mopaasapp.com/', 'https://github.com/momoko8443/ukulelejs', '双向绑定,mvvm,ukulelejs,webcomponent');

-- ----------------------------
-- Table structure for `role`
-- ----------------------------
DROP TABLE IF EXISTS `role`;
CREATE TABLE `role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `roleName` varchar(20) CHARACTER SET utf8 DEFAULT NULL COMMENT '角色名称',
  `desc` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '角色描述',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of role
-- ----------------------------
INSERT INTO `role` VALUES ('24', '超级管理员', '超级管理员   包括所有可操作的功能');
INSERT INTO `role` VALUES ('25', 'admin41', 'this is desc');
INSERT INTO `role` VALUES ('26', '普通用户权限', '普通用户权限  除了用户管理和权限管理之外的功能');

-- ----------------------------
-- Table structure for `role_action`
-- ----------------------------
DROP TABLE IF EXISTS `role_action`;
CREATE TABLE `role_action` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `roleId` int(11) DEFAULT NULL COMMENT '角色ID',
  `actionId` int(11) DEFAULT NULL COMMENT '链接ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=222 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of role_action
-- ----------------------------
INSERT INTO `role_action` VALUES ('95', '25', '1');
INSERT INTO `role_action` VALUES ('96', '25', '2');
INSERT INTO `role_action` VALUES ('97', '25', '3');
INSERT INTO `role_action` VALUES ('98', '25', '6');
INSERT INTO `role_action` VALUES ('166', '26', '1');
INSERT INTO `role_action` VALUES ('167', '26', '2');
INSERT INTO `role_action` VALUES ('168', '26', '3');
INSERT INTO `role_action` VALUES ('169', '26', '4');
INSERT INTO `role_action` VALUES ('170', '26', '5');
INSERT INTO `role_action` VALUES ('171', '26', '6');
INSERT INTO `role_action` VALUES ('172', '26', '7');
INSERT INTO `role_action` VALUES ('173', '26', '8');
INSERT INTO `role_action` VALUES ('174', '26', '9');
INSERT INTO `role_action` VALUES ('175', '26', '13');
INSERT INTO `role_action` VALUES ('176', '26', '15');
INSERT INTO `role_action` VALUES ('177', '26', '17');
INSERT INTO `role_action` VALUES ('178', '26', '18');
INSERT INTO `role_action` VALUES ('179', '26', '19');
INSERT INTO `role_action` VALUES ('180', '26', '20');
INSERT INTO `role_action` VALUES ('181', '26', '21');
INSERT INTO `role_action` VALUES ('182', '26', '22');
INSERT INTO `role_action` VALUES ('183', '26', '23');
INSERT INTO `role_action` VALUES ('184', '24', '1');
INSERT INTO `role_action` VALUES ('185', '24', '2');
INSERT INTO `role_action` VALUES ('186', '24', '3');
INSERT INTO `role_action` VALUES ('187', '24', '4');
INSERT INTO `role_action` VALUES ('188', '24', '5');
INSERT INTO `role_action` VALUES ('189', '24', '6');
INSERT INTO `role_action` VALUES ('190', '24', '7');
INSERT INTO `role_action` VALUES ('191', '24', '8');
INSERT INTO `role_action` VALUES ('192', '24', '9');
INSERT INTO `role_action` VALUES ('193', '24', '13');
INSERT INTO `role_action` VALUES ('194', '24', '15');
INSERT INTO `role_action` VALUES ('195', '24', '17');
INSERT INTO `role_action` VALUES ('196', '24', '18');
INSERT INTO `role_action` VALUES ('197', '24', '19');
INSERT INTO `role_action` VALUES ('198', '24', '20');
INSERT INTO `role_action` VALUES ('199', '24', '21');
INSERT INTO `role_action` VALUES ('200', '24', '22');
INSERT INTO `role_action` VALUES ('201', '24', '23');
INSERT INTO `role_action` VALUES ('202', '24', '24');
INSERT INTO `role_action` VALUES ('203', '24', '25');
INSERT INTO `role_action` VALUES ('204', '24', '26');
INSERT INTO `role_action` VALUES ('205', '24', '27');
INSERT INTO `role_action` VALUES ('206', '24', '28');
INSERT INTO `role_action` VALUES ('207', '24', '29');
INSERT INTO `role_action` VALUES ('208', '24', '30');
INSERT INTO `role_action` VALUES ('209', '24', '31');
INSERT INTO `role_action` VALUES ('210', '24', '32');
INSERT INTO `role_action` VALUES ('211', '24', '33');
INSERT INTO `role_action` VALUES ('212', '24', '34');
INSERT INTO `role_action` VALUES ('213', '24', '35');
INSERT INTO `role_action` VALUES ('216', '14', '1');
INSERT INTO `role_action` VALUES ('217', '14', '2');
INSERT INTO `role_action` VALUES ('218', '14', '3');
INSERT INTO `role_action` VALUES ('219', '14', '4');
INSERT INTO `role_action` VALUES ('220', '14', '5');
INSERT INTO `role_action` VALUES ('221', '14', '6');

-- ----------------------------
-- Table structure for `tool`
-- ----------------------------
DROP TABLE IF EXISTS `tool`;
CREATE TABLE `tool` (
  `lId` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '自增加主键',
  `toolName` varchar(255) DEFAULT NULL COMMENT '工具名称',
  `toolUrl` varchar(255) DEFAULT NULL COMMENT '工具地址',
  `toolDesc` varchar(255) DEFAULT NULL COMMENT '工具介绍',
  PRIMARY KEY (`lId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='前端工具表';

-- ----------------------------
-- Records of tool
-- ----------------------------

-- ----------------------------
-- Table structure for `url_action`
-- ----------------------------
DROP TABLE IF EXISTS `url_action`;
CREATE TABLE `url_action` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '角色链接',
  `desc` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '链接描述',
  `code` varchar(50) DEFAULT NULL COMMENT '操作的唯一可读标识码，如 article_del, user_add 等',
  PRIMARY KEY (`id`),
  UNIQUE KEY `url_code_unique` (`url`,`code`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of url_action
-- ----------------------------
INSERT INTO `url_action` VALUES ('1', '/admin/article/add', '添加文章', 'article_add');
INSERT INTO `url_action` VALUES ('2', '/admin/article/del', '删除文章', 'article_del');
INSERT INTO `url_action` VALUES ('3', '/admin/article/edit', '编辑文章', 'article_edit');
INSERT INTO `url_action` VALUES ('4', '/admin/category/add', '添加文章分类', 'category_add');
INSERT INTO `url_action` VALUES ('5', '/admin/category/edit', '编辑文章分类', 'category_edit');
INSERT INTO `url_action` VALUES ('6', '/admin/category/del', '删除文章分类', 'category_del');
INSERT INTO `url_action` VALUES ('7', '/admin/article/list', '文章列表', 'article_list');
INSERT INTO `url_action` VALUES ('8', '/admin/article/verify', '文章审核', 'article_verify');
INSERT INTO `url_action` VALUES ('9', '/admin/article/view', '查看文章', 'article_view');
INSERT INTO `url_action` VALUES ('13', '/admin/category/list', '文章分类列表', 'category_list');
INSERT INTO `url_action` VALUES ('15', '/admin/category/view', '查看文章分类插件', 'category_view');
INSERT INTO `url_action` VALUES ('17', '/admin/plugin/verify', '插件审核', 'plugin_verify');
INSERT INTO `url_action` VALUES ('18', '/admin/plugin/list', '插件列表', 'plugin_list');
INSERT INTO `url_action` VALUES ('19', '/admin/plugin/add', '添加插件', 'plugin_add');
INSERT INTO `url_action` VALUES ('20', '/admin/plugin/view', '查看插件', 'plugin_view');
INSERT INTO `url_action` VALUES ('21', '/admin/plugin/edit', '编辑插件', 'plugin_edit');
INSERT INTO `url_action` VALUES ('22', '/admin/plugin/del', '删除插件', 'plugin_del');
INSERT INTO `url_action` VALUES ('23', '/admin/user/info', '个人信息', 'user_info');
INSERT INTO `url_action` VALUES ('24', '/admin/user/assign', '用户分配角色', 'user_assign');
INSERT INTO `url_action` VALUES ('25', '/admin/user/add', '用户添加', 'user_add');
INSERT INTO `url_action` VALUES ('26', '/admin/user/edit', '编辑用户', 'user_edit');
INSERT INTO `url_action` VALUES ('27', '/admin/user/del', '删除用户', 'user_del');
INSERT INTO `url_action` VALUES ('28', '/admin/user/list', '用户列表', 'user_list');
INSERT INTO `url_action` VALUES ('29', '/admin/user/view', '查看用户', 'user_view');
INSERT INTO `url_action` VALUES ('30', '/admin/authority/add', '角色添加', 'authority_add');
INSERT INTO `url_action` VALUES ('31', '/admin/authority/edit', '编辑角色', 'authority_edit');
INSERT INTO `url_action` VALUES ('32', '/admin/authority/del', '删除角色', 'authority_del');
INSERT INTO `url_action` VALUES ('33', '/admin/authority/list', '角色列表', 'authority_list');
INSERT INTO `url_action` VALUES ('34', '/admin/authority/view', '查看角色', 'authority_view');
INSERT INTO `url_action` VALUES ('35', '/admin/user/resetPass', '重置密码', 'user_reset_pass');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '自增加主键',
  `realName` varchar(255) DEFAULT NULL COMMENT '用户真实名称',
  `picPath` varchar(255) DEFAULT NULL COMMENT '头像地址',
  `userDesc` varchar(255) DEFAULT NULL COMMENT '用户简介',
  `birth` date DEFAULT NULL COMMENT '用户生日   1987-05-14',
  `sex` int(11) DEFAULT NULL COMMENT '用户性别   0为男生   1为女生',
  `address` varchar(50) DEFAULT NULL COMMENT '详细地址',
  `city` varchar(50) DEFAULT NULL COMMENT '城市',
  `province` varchar(50) DEFAULT NULL COMMENT '省',
  `county` varchar(50) DEFAULT NULL COMMENT '国家',
  `district` varchar(50) DEFAULT NULL COMMENT '区',
  `accountId` int(11) DEFAULT NULL,
  `nickName` varchar(255) DEFAULT NULL COMMENT '昵称',
  `email` varchar(50) DEFAULT NULL COMMENT '用户邮箱',
  `website` varchar(200) DEFAULT NULL COMMENT '个人博客地址',
  `roleId` int(11) DEFAULT NULL COMMENT '角色ID',
  `isDelete` int(11) DEFAULT '1' COMMENT '是否删除  1为正常  2为删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8 COMMENT='用户信息表';

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', '超级管理员', '/files/Koala.jpg', '    公共    22 222', '2015-10-15', '0', '提高防御和太阳', '济源', '河南', null, '济源', '1', '管理员', '12@111.com', null, '24', '1');
INSERT INTO `user` VALUES ('2', '王勇', '/files/3.jpg', '99无限-》技术架构-》前端组 ', '1987-06-09', '0', '金运路地铁站', '嘉定区', '上海', null, null, '2', 'eric', 'wangyong31893189@aliyun.com', null, '26', '1');
INSERT INTO `user` VALUES ('3', null, null, null, '2015-12-23', null, null, null, null, null, null, '3', null, null, null, '26', '1');
INSERT INTO `user` VALUES ('4', '', '/files/Chrysanthemum.jpg', ' ', '2015-12-24', '0', '', 'undefined', '', null, 'undefined', '4', 'hl', '', '', '26', '1');
INSERT INTO `user` VALUES ('5', null, null, null, '2015-12-31', null, null, null, null, null, null, '8', null, null, null, '-1', '2');
INSERT INTO `user` VALUES ('6', '', '/files/Desert.jpg', '      ', '2015-12-14', '1', '', 'undefined', '', null, 'undefined', '9', '芈月', '', '', null, '2');
INSERT INTO `user` VALUES ('7', '那英', '/files/Penguins.jpg', '歌手           ', '2015-11-09', '1', '鲁班路', '南京', '江苏', '中国', '雨花台区', '10', 'ny', 'ny@foxmail.com', 'ny.blog.com', '11', '2');
INSERT INTO `user` VALUES ('8', null, null, null, '2015-12-24', null, null, null, null, null, null, '11', null, null, null, null, '2');
INSERT INTO `user` VALUES ('9', null, null, null, '2015-12-23', null, null, null, null, null, null, '12', null, null, null, null, '2');
INSERT INTO `user` VALUES ('10', null, null, null, '2015-12-11', null, null, null, null, null, null, '13', null, null, null, null, '2');
INSERT INTO `user` VALUES ('11', null, null, null, null, null, null, null, null, null, null, '14', null, null, null, null, '2');
INSERT INTO `user` VALUES ('12', null, null, null, null, null, null, null, null, null, null, '15', null, null, null, '26', '1');
INSERT INTO `user` VALUES ('13', null, null, null, null, null, null, null, null, null, null, '16', null, null, null, '26', '1');
INSERT INTO `user` VALUES ('14', null, null, null, null, null, null, null, null, null, null, '17', null, null, null, '26', '1');
INSERT INTO `user` VALUES ('15', null, null, null, null, null, null, null, null, null, null, '18', null, null, null, '26', '1');
INSERT INTO `user` VALUES ('16', null, null, null, null, null, null, null, null, null, null, '19', null, null, null, '26', '1');
INSERT INTO `user` VALUES ('17', null, null, null, null, null, null, null, null, null, null, '20', null, null, null, '26', '1');
INSERT INTO `user` VALUES ('18', null, null, null, null, null, null, null, null, null, null, '21', null, null, null, '26', '1');
INSERT INTO `user` VALUES ('19', null, null, null, null, null, null, null, null, null, null, '22', null, null, null, '26', '1');
